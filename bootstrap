#!/usr/bin/env bash

declare -r GITHUB_REPOSITORY="montchr/dots"

declare -r DOTFILES_ORIGIN="git@github.com:$GITHUB_REPOSITORY.git"
declare -r DOTFILES_TARBALL_URL="https://github.com/$GITHUB_REPOSITORY/tarball/main"
declare -r DOTFILES_UTILS_URL="https://raw.githubusercontent.com/$GITHUB_REPOSITORY/main/lib/utils.sh"

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

declare DOTFILES_DIR="$HOME/.dots"
declare SKIP_QUESTIONS=false

# ----------------------------------------------------------------------
# | Helper Functions                                                   |
# ----------------------------------------------------------------------

download() {
  local url="$1"
  local output="$2"
  if command -v "curl" &>/dev/null; then
    curl -LsSo "$output" "$url" &>/dev/null
    return $?
  elif command -v "wget" &>/dev/null; then
    wget -qO "$output" "$url" &>/dev/null
    return $?
  fi
  return 1
}

download_dotfiles() {
  local tmp_file=""

  print_in_purple "\n • Download and extract archive\n\n"
  tmp_file="$(mktemp /tmp/XXXXX)"
  download "$DOTFILES_TARBALL_URL" "$tmp_file"
  print_result $? "Download archive" "true"
  printf "\n"

  if ! $SKIP_QUESTIONS; then
    ask_for_confirmation "Do you want to store the dotfiles in '$DOTFILES_DIR'?"
    if ! user_confirmed; then
      DOTFILES_DIR=""
      while [ -z "$DOTFILES_DIR" ]; do
        ask "Please specify another location for the dotfiles (path): "
        DOTFILES_DIR="$(get_answer)"
      done
    fi

    # Ensure the `dotfiles` directory is available
    while [ -e "$DOTFILES_DIR" ]; do
      ask_for_confirmation "'$DOTFILES_DIR' already exists, do you want to overwrite it?"
      if user_confirmed; then
        rm -rf "$DOTFILES_DIR"
        break
      else
        DOTFILES_DIR=""
        while [ -z "$DOTFILES_DIR" ]; do
          ask "Please specify another location for the dotfiles (path): "
          DOTFILES_DIR="$(get_answer)"
        done
      fi
    done

    printf "\n"
  else
    rm -rf "$DOTFILES_DIR" &>/dev/null
  fi

  mkdir -p "${DOTFILES_DIR}"
  print_result $? "Create '$DOTFILES_DIR'" "true"

  # Extract archive in the `dotfiles` directory.
  extract "$tmp_file" "$DOTFILES_DIR"
  print_result $? "Extract archive" "true"

  rm -rf "$tmp_file"
  print_result $? "Remove archive"

  # @TODO change this directory
  cd "${DOTFILES_DIR}/os" ||
    return 1
}

download_utils() {
  local tmp_file=""
  tmp_file="$(mktemp /tmp/XXXXX)"
  download "$DOTFILES_UTILS_URL" "$tmp_file" &&
    . "$tmp_file" &&
    rm -rf "$tmp_file" &&
    return 0
  return 1
}

extract() {
  local archive="$1"
  local outputDir="$2"
  if command -v "tar" &>/dev/null; then
    tar -zxf "$archive" --strip-components 1 -C "$outputDir"
    return $?
  fi
  return 1
}

verify_os() {
  declare -r MINIMUM_MACOS_VERSION="10.10"
  # @TODO handle debian!
  declare -r MINIMUM_UBUNTU_VERSION="20.04"

  local os_name
  local os_version
  os_name="$(get_os)"
  os_version="$(get_os_version)"

  # Check if the OS is `macOS` and it's above the required version.
  if [ "$os_name" == "macos" ]; then
    if is_supported_version "$os_version" "$MINIMUM_MACOS_VERSION"; then
      return 0
    else
      printf "Sorry, this script is intended only for macOS %s+" "$MINIMUM_MACOS_VERSION"
    fi

    # Check if the OS is `Ubuntu` and it's above the required version.
  elif [ "$os_name" == "ubuntu" ]; then
    if is_supported_version "$os_version" "$MINIMUM_UBUNTU_VERSION"; then
      return 0
    else
      printf "Sorry, this script is intended only for Ubuntu %s+" "$MINIMUM_UBUNTU_VERSION"
    fi
  else
    printf "Sorry, this script is intended only for macOS and Ubuntu!"
  fi

  return 1
}

# ----------------------------------------------------------------------
# | Main                                                               |
# ----------------------------------------------------------------------

main() {
  # Ensure that the following actions are made relative to this file's path.
  cd "$(dirname "${BASH_SOURCE[0]}")" ||
    exit 1

  # Load utils
  if [ -x "lib/utils.sh" ]; then
    . "lib/utils.sh" || exit 1
  else
    download_utils || exit 1
  fi

  # Ensure the OS is supported and it's above the required version.
  verify_os ||
    exit 1

  should_skip_questions "$@" &&
    SKIP_QUESTIONS=true

  ask_for_sudo

  # Check if this script was run directly. If not, it most likely means that the
  # dotfiles were not yet set up, and they will need to be downloaded.
  printf "%s" "${BASH_SOURCE[0]}" | grep "setup.sh" &>/dev/null ||
    download_dotfiles

  print_in_purple "\n • Install\n"
  if [[ -f "./os/$(get_os)/install" ]]; then
    "./os/$(get_os)/install"
  else
    print_error "No installer found for current OS '$(get_os)'! Aborting."
    exit 1
  fi

  print_in_purple "\n • Preferences\n"
  if [[ -f "./os/$(get_os)/configure" ]]; then
    ask "Set the system name: "
    system_name=$(get_answer)
    "./os/$(get_os)/configure ${system_name}"
  else
    print_warning "No configurator found for current OS '$(get_os)'! Continuing..."
  fi

  if ! $SKIP_QUESTIONS; then
    print_in_purple "\n • Restart\n\n"

    ask_for_confirmation "Do you want to restart? You probably should."
    printf "\n"

    if answer_is_yes; then
        sudo shutdown -r now &> /dev/null
    fi
  fi
}

main "$@"

#!/usr/bin/env bash

set -e

readonly QUERENT="montchr"
readonly REPO_ID="montchr/dots"
readonly DOTFILES_ORIGIN="git@github.com:${REPO_ID}.git"
readonly DOTFILES_BRANCH="${CDOM_INIT_DOTFILES_BRANCH:-main}"
readonly DOTFILES_TARBALL_URL="https://github.com/${REPO_ID}/tarball/${DOTFILES_BRANCH}"
readonly DOTFILES_UTILS_BASE_URL="https://raw.githubusercontent.com/${REPO_ID}/${DOTFILES_BRANCH}/lib"

DOTFILES_DIR="${HOME}/.dots"


# ----------------------------------------------------------------------
# | Helper Functions                                                   |
# ----------------------------------------------------------------------

# Download file from a URL.
# Parameters:
#   URL
#   Output path
function download () {
  local url="$1"
  local output="$2"
  if command -v "curl" &>/dev/null; then
    curl -LsSo "$output" "$url" &>/dev/null
    return $?
  elif command -v "wget" &>/dev/null; then
    wget -qO "$output" "$url" &>/dev/null
    return $?
  fi
  return 1
}

# Source a file, falling back to sourcing ephemerally from the remote.
# Parameter:
#   Relative path to file
function source_ephemeral () {
  local path="$1"
  local tmp_file=""
  local url=""

  if [[ -f "${path}" ]]; then
    # shellcheck disable=SC1090
    . "${path}" \
      && return \
      || return 1
  fi

  tmp_file="$(mktemp /tmp/XXXXXXXX)"
  url="${DOTFILES_UTILS_BASE_URL}/${path}.sh"

  download "${url}" "${tmp_file}" && {
    # shellcheck disable=SC1090
    . "${tmp_file}" \
      && rm -rf "${tmp_file}"
  } && return 0

  return 1
}

function verify_os () {
  declare -A Names Versions
  local os_name
  local os_version
  local supported_version

  Names=(
    [macos]="macOS"
    [ubuntu]="Ubuntu"
  )

  Versions=(
    [macos]="10.10"
    [ubuntu]="20.04"
  )

  os_version="$(world::get_os_version)"
  os_name="$(world::get_os_name)"
  supported_version="${Versions[$os_name]}"

  if [[ -z "$supported_version" ]]; then
    echo "Sorry, your OS is not supported!"
    return 1
  fi

  if is_supported_version "${os_version}" "${supported_version}"
  then
    return 0
  else
    printf "Sorry, this script is intended only for %s %s+" \
      "${Names[$os_name]}" \
      "${supported_version}"
    return 1
  fi
}

# Initialize dotfiles git repo in place.
# Globals:
#   DOTFILES_ORIGIN
function init_git_repo () {
  # @TODO set up branch tracking and submodules
  git init && git remote add origin "${DOTFILES_ORIGIN}"
}

# Run configuration script, if available.
# Globals:
#   CDOM_INIT_HOSTNAME
function .do_configure () {
  local hostname

  [[ -f os/$(get_os)/configure ]] \
    || print_warning "No configurator found for current OS '$(get_os)'! Continuing..." \
      && return

  if [[ -n "${CDOM_INIT_HOSTNAME}" ]]; then
    hostname="${CDOM_INIT_HOSTNAME}"
  else
    ask "Set the hostname: "
    hostname="$(get_answer)"
  fi

  # shellcheck disable=SC1090
  . "os/$(get_os)/configure" "${hostname:-CDOM}"
}

# ----------------------------------------------------------------------
# | Main                                                               |
# ----------------------------------------------------------------------

function main () {
  # Ensure that the following actions are made relative to this file's path.
  cd "$(dirname "${BASH_SOURCE[0]}")" ||
    exit 1

  # Ensure the OS is supported and above the minimum version.
  verify_os || exit 1

  if [[ "root" == $(whoami) ]]; then
    msg::warning "Running as root!"
  else
    ask_for_sudo
  fi

  source_ephemeral "utils"

  msg::hed "Who am I? Installing self..."

  source_ephemeral "world"

  if [[ ! -x "${XDG_CONFIG_HOME}/bootstrap" ]]; then
    msg::hed "Cloning dotfiles into ${XDG_CONFIG_HOME}"
    repo::sync "${XDG_CONFIG_HOME}" "gh" "${REPO_ID}"
  fi

  cd "${XDG_CONFIG_HOME}" || {
    print_error "We seem to be lost in '$(pwd)'. Something went wrong!"
    return 1
  }
  
  os_name=$(world::get_os_name)
  
  guard::$os_name \
    && os/$os_name/install
  print_result $? "OS Essentials"

  print_hed "OS Preferences" \
    && .do_configure \
    && print_result $? "OS Preferences"

  print_hed "Bootstrapping complete!"
  
  guard::install && {
      
    if ! is_ci; then
      print_hed "Restart"
  
      ask_for_confirmation "Do you want to restart? You probably should."
      printf "\n"
  
      if user_confirmed; then
        sudo shutdown -r now &> /dev/null
      fi
    fi
      
  }

}

main "$@"

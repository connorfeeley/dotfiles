* Addendum
1. [[*Useful Commands][Useful Commands]]
   1. [[#build-debian-vm][Build =debian-vm= system (inside VM)]]
   2. [[#deploy-rs-build][=deploy-rs=: build =debian-vm= in QEMU]]

* Flake Outputs

** Home Manager Modules

*** iTerm2

A ~home-manager~ module is exported which provides options for enabling ~iterm2~'s [[https://iterm2.com/documentation-shell-integration.html][shell integration]].

To use this module, add the module output to your flake (~homeModules.iterm2~).

Configuration:
#+begin_src nix
programs.iterm2 = {
  enable = true;         # Default: false
  package = pkgs.iterm2; # Default: pkgs.iterm2

  enableBashIntegration = true; # Default: stdenv.isDarwin && config.programs.bash.enable
  enableFishIntegration = true; # Default: stdenv.isDarwin && config.programs.fish.enable
  enableZshIntegration = true;  # Default: stdenv.isDarwin && config.programs.zsh.enable
}
#+end_src

* Hosts

** Workstation (~workstation~)
*** Partitions

- LUKS volume: ~nvme0n1p5~ - ~c1b38fbf-1786-4d0d-bfed-eb4bc15570f9~ - 443.22 GiB
  + Home: ~/dev/mapper/LinuxGroup-home~ - ~/dev/dm-3~ - ~9d3dd037-d860-40e1-b053-adf05f7f7dc1~ - 278 GiB
  + Root: ~/dev/mapper/LinuxGroup-root~  - ~/dev/dm-2~ - ~b13cc249-6db1-41c3-bd28-9213dbd5b773~ - 458 GiB
  + Swap: ~/dev/mapper/LinuxGroup-swap~ - ~/dev/dm-1~ - ~c1b79739-30a2-45fd-b238-b54049525d00~
- exFAT boot partition: ~nvme0n1p1~ - ~86A8-3AD7~ - 100 MiB
- Data partition (~/mnt/ssd~): ~nvme1n1p1~ - ~f08114d8-bff1-4c63-9e85-3d3aa09aca50~

- ZFS: 5 x 2 TiB Western Digital Blue (~WDC WD20EZBX-00A~)
- RaidZ2: 3 useable drives + 2 parity drives
| Blockdev | UUID | ID                     | Label |
|----------+------+------------------------+-------|
| sda      |      | wwn-0x50014ee2bebedeff |       |
| sdb      |      | wwn-0x50014ee2146dee6c |       |
| sdc      |      | wwn-0x50014ee2bf0d6363 |       |
| sdd      |      | wwn-0x50014ee21413b844 |       |
| sde      |      | wwn-0x50014ee2146238e1 |       |

- Zpool name: ~rpool~
*** Disks
**** ~parted~ output
~print all~:
#+begin_example
GNU Parted 3.5
Using /dev/sda
Welcome to GNU Parted! Type 'help' to view a list of commands.
(parted) print all
Model: ATA WDC WD20EZBX-00A (scsi)
Disk /dev/sda: 2000GB
Sector size (logical/physical): 512B/4096B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name  Flags
 5      24.6kB  1049kB  1024kB                     bios_grub
 1      1049kB  1075MB  1074MB                     boot, esp
 2      1075MB  5370MB  4295MB
 3      5370MB  2000GB  1995GB


Model: ATA WDC WD20EZBX-00A (scsi)
Disk /dev/sdb: 2000GB
Sector size (logical/physical): 512B/4096B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name  Flags
 5      24.6kB  1049kB  1024kB                     bios_grub
 1      1049kB  1075MB  1074MB                     boot, esp
 2      1075MB  5370MB  4295MB
 3      5370MB  2000GB  1995GB


Model: ATA WDC WD20EZBX-00A (scsi)
Disk /dev/sdc: 2000GB
Sector size (logical/physical): 512B/4096B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name  Flags
 5      24.6kB  1049kB  1024kB                     bios_grub
 1      1049kB  1075MB  1074MB                     boot, esp
 2      1075MB  5370MB  4295MB
 3      5370MB  2000GB  1995GB


Model: ATA WDC WD20EZBX-00A (scsi)
Disk /dev/sdd: 2000GB
Sector size (logical/physical): 512B/4096B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name  Flags
 5      24.6kB  1049kB  1024kB                     bios_grub
 1      1049kB  1075MB  1074MB                     boot, esp
 2      1075MB  5370MB  4295MB
 3      5370MB  2000GB  1995GB


Model: ATA WDC WD20EZBX-00A (scsi)
Disk /dev/sde: 2000GB
Sector size (logical/physical): 512B/4096B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name  Flags
 5      24.6kB  1049kB  1024kB                     bios_grub
 1      1049kB  1075MB  1074MB                     boot, esp
 2      1075MB  5370MB  4295MB
 3      5370MB  2000GB  1995GB


Model: KINGSTON SA2000M81000G (nvme)
Disk /dev/nvme0n1: 1000GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name                          Flags
 1      1049kB  106MB   105MB   fat32        EFI system partition          boot, esp
 2      106MB   123MB   16.8MB               Microsoft reserved partition  msftres
 3      123MB   524GB   524GB   ntfs         Basic data partition          msftdata
 4      524GB   524GB   523MB   ntfs                                       hidden, diag
 5      524GB   1000GB  476GB


Model: Samsung SSD 970 EVO Plus 1TB (nvme)
Disk /dev/nvme1n1: 1000GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size   File system  Name  Flags
 1      1049kB  500GB   500GB  ext4         work
 2      500GB   1000GB  500GB  ntfs               msftdata
#+end_example

**** SSDs
***** Samsung 970 EVO Plus (1TB): ~nvme1n1~
#+begin_example
Model: Samsung SSD 970 EVO Plus 1TB (nvme)
Disk /dev/nvme1n1: 1000GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size   File system  Name  Flags
 1      1049kB  500GB   500GB  ext4         work
 2      500GB   1000GB  500GB  ntfs               msftdata
#+end_example

- Linux misc data drive: ~/dev/nvme1n1p1:/mnt/ssd~
- Windows misc data drive (games): ~/dev/nvme1n1p2:/mnt/ssd~

***** Kingston SA2000 (1TB): ~nvme0n1~
#+begin_example
Model: KINGSTON SA2000M81000G (nvme)
Disk /dev/nvme0n1: 1000GB
Sector size (logical/physical): 512B/512B
Partition Table: gpt
Disk Flags:

Number  Start   End     Size    File system  Name                          Flags
 1      1049kB  106MB   105MB   fat32        EFI system partition          boot, esp
 2      106MB   123MB   16.8MB               Microsoft reserved partition  msftres
 3      123MB   524GB   524GB   ntfs         Basic data partition          msftdata
 4      524GB   524GB   523MB   ntfs                                       hidden, diag
 5      524GB   1000GB  476GB
#+end_example

*** ZFS on SSD (~nvme1n1~): Instructions (as root)
[[https://github.com/cole-h/nixos-config#1-partition][GitHub - cole-h/nixos-config: My flakes-powered NixOS configuration]]


#+begin_src shell :noeval
# This section should be run as root.

export DISK=/dev/disk/by-id/nvme-Samsung_SSD_970_EVO_Plus_1TB_S59ANMFNB30863T
export INST_PARTSIZE_SWAP=32
export INST_PARTSIZE_NPOOL=

for i in ${DISK}; do
  # Partition disk
  sgdisk --zap-all $i

  sgdisk -n1:1M:+1G -t1:EF00 $i

  sgdisk -n2:0:+4G -t2:BE00 $i

  test -z $INST_PARTSIZE_SWAP || sgdisk -n4:0:+${INST_PARTSIZE_SWAP}G -t4:8200 $i

  if test -z $INST_PARTSIZE_NPOOL; then
      sgdisk -n3:0:0   -t3:BF00 $i
  else
      sgdisk -n3:0:+${INST_PARTSIZE_NPOOL}G -t3:BF00 $i
  fi

  sgdisk -a1 -n5:24K:+1000K -t5:EF02 $i
done

# Create boot pool
zpool create \
    -o compatibility=grub2 \
    -o ashift=12 \
    -o autotrim=on \
    -O acltype=posixacl \
    -O canmount=off \
    -O compression=on \
    -O devices=off \
    -O normalization=formD \
    -O relatime=on \
    -O xattr=sa \
    -O mountpoint=/boot \
    -R /mnt \
    bpool \
    $(for i in ${DISK}; do
       printf "$i-part2 ";
      done)

# Create root pool
zpool create \
    -o ashift=12 \
    -o autotrim=on \
    -R /mnt \
    -O acltype=posixacl \
    -O canmount=off \
    -O compression=zstd \
    -O dnodesize=auto \
    -O normalization=formD \
    -O relatime=on \
    -O xattr=sa \
    -O mountpoint=/ \
    npool \
   $(for i in ${DISK}; do
      printf "$i-part3 ";
     done)

# Create encrypted root container
zfs create \
 -o canmount=off \
 -o mountpoint=none \
 -o encryption=on \
 -o keylocation=prompt \
 -o keyformat=passphrase \
 npool/nixos

# Create system datasets
zfs create -o canmount=on -o mountpoint=/     npool/nixos/root
zfs create -o canmount=on -o mountpoint=/home npool/nixos/home
zfs create -o canmount=off -o mountpoint=/var  npool/nixos/var
zfs create -o canmount=on  npool/nixos/var/lib
zfs create -o canmount=on  npool/nixos/var/log

# Create boot dataset
zfs create -o canmount=off -o mountpoint=none bpool/nixos
zfs create -o canmount=on -o mountpoint=/boot bpool/nixos/root

# Format and mount ESP
for i in ${DISK}; do
 mkfs.vfat -n EFI ${i}-part1
 mkdir -p /mnt/boot/efis/${i##*/}-part1
 mount -t vfat ${i}-part1 /mnt/boot/efis/${i##*/}-part1
done

mkdir -p /mnt/boot/efi
mount -t vfat $(echo $DISK | cut -f1 -d\ )-part1 /mnt/boot/efi

# Disable cache (stale cache will prevent system from booting)
mkdir -p /mnt/etc/zfs/
rm -f /mnt/etc/zfs/zpool.cache
touch /mnt/etc/zfs/zpool.cache
chmod a-w /mnt/etc/zfs/zpool.cache
chattr +i /mnt/etc/zfs/zpool.cache

# Generate initial system configuration
nixos-generate-config --root /mnt

# Set machine-id
cp /tmp/other-ssd/etc/machine-id /mnt/etc/
# -> Copy machine-id from old partition

# ##################### #
# Configure bootloader for both legacy boot and UEFI boot and mirror bootloader
# -> IMPORT zfs-root.nix
# -> DISABLE boot.systemd-boot profile
# ##################### #

# Mount datasets with zfsutil option
sed -i 's|fsType = "zfs";|fsType = "zfs"; options = [ "zfsutil" "X-mount.mkdir" ];|g' \
/mnt/etc/nixos/hardware-configuration.nix
# -> Add 'options = [ "zfsutil" "X-mount.mkdir" ];' to all ZFS fileSystems)

# Install system and apply configuration
nixos-install -v --show-trace --no-root-passwd --root /mnt

# Unmount filesystems
umount -Rl /mnt
zpool export -a

# Done!
reboot
#+end_src


**** Time Machine Filesystem

#+begin_example
tmArgs=(
    -o atime=off
    -o dnodesize=auto
    -o xattr=sa
    -o logbias=throughput
    -o recordsize=1M
    -o compression=zstd-10
    -o refquota=3T
    # optional - greatly improves write performance
    -o sync=disabled
    # security
    -o setuid=off
    -o exec=off
    -o devices=off
)

zfs create "${tmArgs[@]}" rpool/backup/time_machine
#+end_example

*** ZFS on HDDs: Instructions (as root)
https://nixos.wiki/wiki/ZFS
https://openzfs.github.io/openzfs-docs/Getting%20Started/NixOS/Root%20on%20ZFS/3-system-configuration.html
https://cheat.readthedocs.io/en/latest/nixos/zfs_install.html
**** [X] Partition disks
CLOSED: [2022-11-25 Fri 23:35]
  #+begin_src shell :noeval
export DISK="/dev/disk/by-id/wwn-0x50014ee2bebedeff /dev/disk/by-id/wwn-0x50014ee2146dee6c /dev/disk/by-id/wwn-0x50014ee2bf0d6363 /dev/disk/by-id/wwn-0x50014ee21413b844 /dev/disk/by-id/wwn-0x50014ee2146238e1"

INST_PARTSIZE_RPOOL=

for i in ${DISK}; do
  sgdisk --zap-all $i

  sgdisk -n1:1M:+1G -t1:EF00 $i

  sgdisk -n2:0:+4G -t2:BE00 $i

  test -z $INST_PARTSIZE_SWAP || sgdisk -n4:0:+${INST_PARTSIZE_SWAP}G -t4:8200 $i

  if test -z $INST_PARTSIZE_RPOOL; then
      sgdisk -n3:0:0   -t3:BF00 $i
  else
      sgdisk -n3:0:+${INST_PARTSIZE_RPOOL}G -t3:BF00 $i
  fi

  sgdisk -a1 -n5:24K:+1000K -t5:EF02 $i
done
  #+end_src

**** [X] Create boot pool:
CLOSED: [2022-11-25 Fri 23:36]

#+begin_src shell :noeval
# Create the pool. If you want to tweak this a bit and you're feeling adventurous, you
# might try adding one or more of the following additional options:
# To disable writing access times:
#   -O atime=off
# To enable filesystem compression:
#   -O compression=lz4
# To improve performance of certain extended attributes:
#   -O xattr=sa
# For systemd-journald posixacls are required
#   -O  acltype=posixacl
# To specify that your drive uses 4K sectors instead of relying on the size reported
# by the hardware (note small 'o'):
#   -o ashift=12
#
# The 'mountpoint=none' option disables ZFS's automount machinery; we'll use the
# normal fstab-based mounting machinery in Linux.
# '-R /mnt' is not a persistent property of the FS, it'll just be used while we're installing.
zpool create \
    -O mountpoint=none \
    -O atime=off \
    -O compression=lz4 \
    -O xattr=sa \
    -O acltype=posixacl \
    -o ashift=12 \
    -R /mnt/zfs rpool \
    $(for i in ${DISK}; do
          printf "$i-part3 ";
      done)
#+end_src
**** [X] Create filesystems:
CLOSED: [2022-11-25 Fri 23:38]

Create the filesystems. This layout is designed so that /home is separate from the root filesystem, as you'll likely want to snapshot it differently for backup purposes. It also makes a "nixos" filesystem underneath the root, to support installing multiple OSes if that's something you choose to do in future.

#+begin_src shell :noeval
zfs create -o mountpoint=none rpool/root
zfs create -o mountpoint=legacy rpool/root/nixos
zfs create -o mountpoint=legacy rpool/store
zfs create -o mountpoint=legacy rpool/home
zfs create -o mountpoint=legacy rpool/backup
zfs create -o mountpoint=legacy rpool/data
zfs create -o mountpoint=/mnt/zfs/media rpool/data/media
#+end_src

**** [X] Share filesystems via NFS:
CLOSED: [2022-11-26 Sat 00:25]

#+begin_src shell :noeval
zfs set sharenfs='rw' rpool/data
#+end_src

**** [X] Mount filesystems:
CLOSED: [2022-11-25 Fri 23:44]

Mount the filesystems manually. The nixos installer will detect these mountpoints and save them to /mnt/nixos/hardware-configuration.nix during the install process.
#+begin_src shell :noeval
mkdir /mnt/zfs
mount -t zfs rpool/root/nixos /mnt/zfs

mkdir /mnt/zfs/home
mount -t zfs rpool/home /mnt/zfs/home

mkdir /mnt/zfs/backup
mount -t zfs rpool/backup /mnt/zfs/backup

mkdir /mnt/zfs/data
mount -t zfs rpool/data /mnt/zfs/data
#+end_src

**** [X] Snapshot Filesystems
CLOSED: [2022-11-28 Mon 01:51]

#+begin_src shell :noeval
sudo zfs snapshot "rpool@$(hostname)_$(date +%y%m%d%H%M)"
#+end_src

**** [X] Unmount filesystems:
CLOSED: [2022-11-25 Fri 23:45]

#+begin_src shell :noeval
umount -Rl /mnt/zfs
zpool export -a
#+end_src

** MacBook-Pro
A base-model  M1 MacBook Pro. Secondary development machine (though the unholy combination of Nix + Apple Silicon means I'm frequently SSHed into ~workstation~).

*** Setup

#+begin_src shell :noeval
# Install Nix
sh <(curl -L https://nixos.org/nix/install)

ssh cfeeley@localhost

softwareupdate --install-rosetta --agree-to-license

# Install Xcode	from App Store
sudo xcodebuild -license

sudo mv /etc/nix/nix.conf{,.bak}
sudo mv /etc/shells{,.bak}

# Brew
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
brew analytics off

# Clone Repositories
git clone git@git.sr.ht:~cfeeley/dotfield ~/.config/dotfield
git clone git@git.sr.ht:~cfeeley/doom-emacs-private ~/.config/doom
git clone https://github.com/doomemacs/doomemacs ~/.config/emacs

# Install Flake

mkdir ~/Applications

cd ~/.config/dotfield && nix --experimental-features 'nix-command flakes' build ~/.config/dotfield#darwinConfigurations.MacBook-Pro.config.system.build.toplevel -L --keep-going && ./result/sw/bin/darwin-rebuild switch --flake ~/.config/dotfield

printf 'run\tprivate/var/run\n' | sudo tee -a /etc/synthetic.conf
/System/Library/Filesystems/apfs.fs/Contents/Resources/apfs.util -t # For Big Sur and later

cd ~/.config/dotfield && nix --experimental-features 'nix-command flakes' build ~/.config/dotfield#darwinConfigurations.MacBook-Pro.config.system.build.toplevel -L --keep-going && ./result/sw/bin/darwin-rebuild switch --flake ~/.config/dotfield

sudo chsh -s /run/current-system/sw/bin/zsh cfeeley

darwin-rebuild switch --flake ~/.config/dotfield

# Emacs
~/.config/emacs/bin/doom install
#+end_src

|   |   |   |   |   |   | parent of 3781ac52 (docs: add MBP setup instructions) |
** Franklin
The speed demon of the group - an early 2015 13-inch MacBook Air. Used as a server and as an internet gateway for some /loud/ devices that I don't want near my router.

Hardware Overview:
#+begin_example
  Model Name:	MacBook Air
  Model Identifier:	MacBookAir7,2
  Processor Name:	Dual-Core Intel Core i5
  Processor Speed:	1.6 GHz
  Number of Processors:	1
  Total Number of Cores:	2
  L2 Cache (per Core):	256 KB
  L3 Cache:	3 MB
  Hyper-Threading Technology:	Enabled
  Memory:	4 GB
#+end_example

*** Setup

#+begin_src shell :noeval
# Install Nix
sh <(curl -L https://nixos.org/nix/install)

# ssh cfeeley@localhost

# Install Xcode	from App Store
# sudo xcodebuild -license

# Brew
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" && brew analytics off

# Install nix-darwin
nix-build https://github.com/LnL7/nix-darwin/archive/master.tar.gz -A installer
./result/bin/darwin-installer && rm result

# Clone Repositories
# git clone git@git.sr.ht:~cfeeley/dotfield ~/.config/dotfield
# git clone git@git.sr.ht:~cfeeley/doom-emacs-private ~/.config/doom
# git clone https://github.com/doomemacs/doomemacs ~/.config/emacs

# Install Flake
mkdir ~/Applications

# cd ~/.config/dotfield && nix --experimental-features 'nix-command flakes' build ~/.config/dotfield#darwinConfigurations.MacBook-Pro.config.system.build.toplevel -L --keep-going && ./result/sw/bin/darwin-rebuild switch --flake ~/.config/dotfield

printf 'run\tprivate/var/run\n' | sudo tee -a /etc/synthetic.conf
/System/Library/Filesystems/apfs.fs/Contents/Resources/apfs.util -t # For Big Sur and later

# cd ~/.config/dotfield && nix --experimental-features 'nix-command flakes' build ~/.config/dotfield#darwinConfigurations.MacBook-Pro.config.system.build.toplevel -L --keep-going && ./result/sw/bin/darwin-rebuild switch --flake ~/.config/dotfield

sudo chsh -s /run/current-system/sw/bin/zsh cfeeley

# darwin-rebuild switch --flake ~/.config/dotfield

# Emacs
# ~/.config/emacs/bin/doom install

nix --extra-experimental-features 'nix-command flakes' flake show git+ssh://MacBook-Pro.local:/Users/cfeeley/.config/dotfield

echo "trusted-users = root cfeeley nix-ssh @wheel @admin" >> /etc/nix/nix.conf

sudo mv /etc/nix/nix.conf{,.bak}
sudo mv /etc/shells{,.bak}
#+end_src

From another machine:
#+begin_src shell :noeval
nix build ~/.config/dotfield#darwinConfigurations.franklin.config.system.build.toplevel
./result/sw/bin/darwin-rebuild build --flake ~/.config/darwin
#+end_src

* Useful Commands

** Unlock ~git-crypt~

#+begin_src shell :noeval
git-crypt unlock
#+end_src

** Debug Nix Evaluation Errors

*** On Linux

#+begin_src shell :noeval
nix --print-build-logs build ~/.config/dotfield#nixosConfigurations.workstation.config.system.build.toplevel --debugger --ignore-try
#+end_src

*** On Darwin

#+begin_src shell :noeval
nix --print-build-logs build ~/.config/dotfield#darwinConfigurations.MacBook-Pro.config.system.build.toplevel --debugger --ignore-try
#+end_src

** ~NIX_REMOTE~ variable

#+begin_src shell :noeval
NIX_REMOTE=ssh-ng://macbook-pro nix build $DOTFIELD_DIR#darwinConfigurations.MacBook-Pro.config.system.build.toplevel
#+end_src

** Check

#+begin_src shell :noeval
sudo nix -L flake check --option builders-use-substitutes true --builders 'ssh://cfeeley@macbook-pro'
#+end_src

#+begin_src shell :noeval
sudo nix -L flake check --option builders-use-substitutes true --builders 'ssh://cfeeley@workstation'
#+end_src

** Generate ~dot~ graph of nix store size (~nix-du~)

Generate ~dot~ file:
#+begin_src shell :noeval
nix-du -s=100MB | tred > /tmp/store.dot
zgrviewer /tmp/store.dot
#+end_src

Generate ~svg~:
#+begin_src shell :noeval
nix-du -s=100MB -O2 | tred | dot -Tsvg > /tmp/store.svg
#+end_src

** Change default shell

#+begin_src shell :noeval
sudo chsh -s /run/current-system/sw/bin/fish cfeeley
#+end_src

** Fetch flake over ssh

#+begin_src shell
darwin-rebuild switch --print-build-logs --flake git+ssh://cfeeley@workstation:/home/cfeeley/.config/dotfield
#+end_src

***  Build ~MacBook-Pro~ configuration

#+begin_src shell
nom build git+ssh://cfeeley@workstation:/home/cfeeley/.config/dotfield#darwinConfigurations.MacBook-Pro.config.system.build.toplevel
#+end_src

** Build Rosy

#+begin_src shell
# Analogous to nix build $DOTFIELD_DIR#nixosConfigurations.rosy.config.system.build.toplevel
# on host 'rosy'.
# Target parameter: nixos://<host>/<nixosConfiguration>
deploy-flake --flake $DOTFIELD_DIR nixos://rosy/rosy
#+end_src

*** Run checks

#+begin_src shell
nix flake check git+ssh://cfeeley@workstation:/home/cfeeley/.config/dotfield
#+end_src

** Pretty build

#+begin_src shell
nom build ~/.config/dotfield#darwinConfigurations.MacBook-Pro.config.system.build.toplevel
#+end_src

** Infect hetzner

*** Create Floating IP

#+begin_src shell
hcloud primary-ip create --name minecraft --type ipv4 --datacenter ash-dc1
hcloud primary-ip enable-protection minecraft
#+end_src

*** COMMENT Create Volume

#+begin_src shell
hcloud volume create --name minecraft-data --size 10 --location ash
#+end_src

*** Create server
#+begin_src shell
hcloud server create \
    --image ubuntu-20.04 \
    --name h8tsner \
    --type cpx11 \
    --ssh-key GPG \
    --user-data-from-file $DOTFIELD_DIR/nixos/machines/h8tsner/user-data.txt \
    --datacenter ash-dc1 \
    --without-ipv4

    # --volume minecraft-data --automount
#+end_src

*** Assign Floating IP

#+begin_src shell
hcloud server shutdown h8tsner
hcloud primary-ip assign minecraft --server h8tsner
hcloud server poweron h8tsner
#+end_src

*** Deploy config
#+begin_src shell
deploy --skip-checks .#h8tsner -- --print-build-logs

hcloud server reboot h8tsner
#+end_src

** Build =debian-vm= system (inside VM)
#+begin_example
fnix build ~/.config/dotfield#homeConfigurationsPortable.aarch64-linux."cfeeley@debian-vm".activationPackage --show-trace

./result/bin/home-manager-generation
#+end_example

** =deploy-rs=: build =debian-vm= in QEMU
#+begin_example
deploy --skip-checks .#debian-vm -- --print-build-logs --show-trace
#+end_example

** Handy ~numtide/devshell~ functions

Credit: [[https://github.com/montchr/dotfield/blob/8a61b8fe37cc3d3186ac8728363d7977fea6ff6e/devShells/default.nix#L46][github:montchr/dotfield]]
#+begin_src nix
withCategory = category: attrset: attrset // { inherit category; };
pkgWithCategory = category: package: { inherit package category; };
#+end_src
** Emacs Remote

#+begin_src emacs-lisp
(load "server")
(unless (server-running-p) (server-start))
#+end_src

* Handy Information

** Access system configuration in ~home-manager~ module

~osConfig~ is now passed to ~home-manager~ modules ([[https://github.com/nix-community/home-manager/issues/393#issuecomment-1259996423][source]])

* ~rosy~ builder setup
As ~nixos~ user

** Partition disk
[[https://krisztianfekete.org/nixos-on-apple-silicon-with-utm/][source]]

#+begin_src shell :noeval
passwd nixos

sudo parted /dev/vda -- mklabel gpt
sudo parted /dev/vda -- mkpart primary 1GiB -8GiB
sudo parted /dev/vda -- mkpart primary linux-swap -8GiB 100%

sudo parted /dev/vda -- mkpart ESP fat32 1MiB 512MiB
sudo parted /dev/vda -- set 3 esp on

sudo mkfs.ext4 -L nixos /dev/vda1
sudo mkswap -L swap /dev/vda2
sudo mkfs.fat -F 32 -n boot /dev/vda3

sudo mount /dev/disk/by-label/nixos /mnt
sudo mkdir -p /mnt/boot
sudo mount /dev/disk/by-label/boot /mnt/boot
#+end_src

** Mount Share
*** For QEMU
#+begin_src shell :noeval
export SHARED_HOMEDIR=/run/share
export DOTFIELD_DIR=${SHARED_HOMEDIR}/.config/dotfield

sudo mkdir /run/share
sudo mount -t 9p -o trans=virtio share /run/share -oversion=9p2000.L
#+end_src

*** For Apple Virtualization Framework
[[https://docs.getutm.app/advanced/rosetta/#enabling-rosettaA][source]]
#+begin_src shell :noeval
export SHARED_HOMEDIR=/run/share/cfeeley
export DOTFIELD_DIR=${SHARED_HOMEDIR}/.config/dotfield

sudo mkdir /run/share
sudo mount -t virtiofs share /run/share/

sudo mkdir /run/rosetta
sudo mount -t virtiofs rosetta /run/rosetta/
#+end_src

** Install

As root (~sudo su~):
#+begin_src shell :noeval
sudo su

nix-shell -p git

mkdir -p ~/.ssh && cp ${SHARED_HOMEDIR}/.ssh/id_* ~/.ssh/

mkdir -p ~/.config && cp -a ${SHARED_HOMEDIR}/.config/nix/ ~/.config

# sudo nix --extra-experimental-features 'nix-command flakes' flake show $DOTFIELD_DIR

nixos-install --verbose --flake $DOTFIELD_DIR#rosy

umount /mnt/boot/
umount /mnt/

sync && reboot
#+end_src

** Rebuild ~rosy~

#+begin_src shell :noeval
sudo nixos-rebuild --print-build-logs switch --flake $DOTFIELD_DIR#rosy
#+end_src

** Build ~rosy~ iso

#+begin_src shell :noeval
nix shell nixpkgs#nixos-generators

export DOTFIELD_DIR=/run/share/cfeeley/.config/dotfield

nixos-generate --flake $DOTFIELD_DIR#rosy --show-trace --format iso
#+end_src

** Build ~workstation~ iso

#+begin_src shell :noeval
nix shell nixpkgs#nixos-generators

export DOTFIELD_DIR=/run/share/cfeeley/.config/dotfield

nix -L build $DOTFIELD_DIR#workstation-iso
#+end_src

* ~workstation~ recovery
:PROPERTIES:
:header-args:shell: :noweb-ref workstation-recovery :tangle no :noweb no :comments noweb
:END:

Honestly - this was such a waste of time. I tried 800 different things but in the end I ended up just nuking my nix store... which at least let me reinstall NixOS.

Biggest takeaway: ~initrd~ secrets are /the devil/. See:
[[https://github.com/NixOS/nixpkgs/issues/34262][NixOS/nixpkgs#34262 `boot.initrd.network.ssh.hostRSAKey` breaks activation if...]]

#+begin_src shell :tangle shell/scripts/workstation-recovery.sh :noweb yes :noweb-ref nil :comments none
#!/usr/bin/env bash

<<workstation-recovery>>
#+end_src

** Partition disk

#+begin_src shell
# format the disk with the luks structure
# open the encrypted partition and map it to /dev/mapper/cryptroot
cryptsetup luksOpen /dev/nvme0n1p5 cryptroot

# Mount partitions
mount /dev/mapper/LinuxGroup-root /mnt

# mount /dev/disk/by-label/EFIBOOT /mnt/boot
mount /dev/nvme0n1p1 /mnt/boot

mount /dev/mapper/LinuxGroup-home /mnt/home
#+end_src

** Enter NixOS chroot

#+begin_src shell
# Enter chroot
nixos-enter --root /mnt

# Login to cfeeley
su - cfeeley

# Unlock GPG
echo "Enter password for GPG key:"; stty -echo; gpg --passphrase-fd 0 --pinentry-mode loopback --decrypt ~/test-gpg.asc; stty echo

# Fetch and reset repo
cd ~/.config/dotfield
git remote add temp-mbp cfeeley@192.168.0.85:~/.config/dotfield
git config --global --add safe.directory /mnt/home/cfeeley/.config/dotfield
git fetch temp-mbp && git reset --hard temp-mbp/master

# Hack: use path://<repo> to workaround chroot problems
export DOTFIELD_DIR=path:///home/cfeeley/.config/dotfield

# Rebuild system configuration
sudo nixos-rebuild build --verbose --flake $DOTFIELD_DIR#workstation

# Activate system configuration and reinstall the bootloader
# sudo nixos-rebuild switch --verbose --install-bootloader --flake $DOTFIELD_DIR#workstation
#+end_src

Note the path to the final derivation - this will be used to activate the system in the next step.

** Install NixOS

*NOTE:* not inside ~nixos-enter~ chroot.

#+begin_src shell
# Get a DHCP address - only IPv6 worked until this for some reason
nix run nixpkgs#dhcpcd

echo "Enter password for GPG key:"; gpg --passphrase-fd 0 --pinentry-mode loopback --homedir /mnt/home/cfeeley/.gnupg --decrypt /mnt/home/cfeeley/test-gpg.asc

# Hack: use path://<repo> to workaround chroot problems
export DOTFIELD_DIR=path:///mnt/home/cfeeley/.config/dotfield

nixos-install --verbose --flake $DOTFIELD_DIR#workstation
#+end_src

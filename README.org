* Table of Contents
1. [[*Useful Commands][Useful Commands]]
   1. [[#build-debian-vm][Build =debian-vm= system (inside VM)]]
   2. [[#deploy-rs-build][=deploy-rs=: build =debian-vm= in QEMU]]

* Useful Commands

** Unlock ~git-crypt~

#+begin_src shell :noeval
git-crypt unlock
#+end_src

** Debug Nix Evaluation Errors

*** On Linux

#+begin_src shell :noeval
nix --print-build-logs build ~/.config/dotfield#nixosConfigurations.workstation.config.system.build.toplevel --debugger --ignore-try
#+end_src

*** On Darwin

#+begin_src shell :noeval
nix --print-build-logs build ~/.config/dotfield#darwinConfigurations.MacBook-Pro.config.system.build.toplevel --debugger --ignore-try
#+end_src

** ~NIX_REMOTE~ variable

#+begin_src shell :noeval
NIX_REMOTE=ssh-ng://macbook-pro nix build $DOTFIELD_DIR#darwinConfigurations.MacBook-Pro.config.system.build.toplevel
#+end_src

** Check

#+begin_src shell :noeval
sudo nix -L flake check --option builders-use-substitutes true --builders 'ssh://cfeeley@macbook-pro'
#+end_src

#+begin_src shell :noeval
sudo nix -L flake check --option builders-use-substitutes true --builders 'ssh://cfeeley@workstation'
#+end_src

** Generate ~dot~ graph of nix store size (~nix-du~)

Generate ~dot~ file:
#+begin_src shell :noeval
nix-du -s=100MB | tred > /tmp/store.dot
zgrviewer /tmp/store.dot
#+end_src

Generate ~svg~:
#+begin_src shell :noeval
nix-du -s=100MB -O2 | tred | dot -Tsvg > /tmp/store.svg
#+end_src

** Change default shell

#+begin_src shell :noeval
sudo chsh -s /run/current-system/sw/bin/fish cfeeley
#+end_src

** Fetch flake over ssh

#+begin_src shell
darwin-rebuild switch --print-build-logs --flake git+ssh://cfeeley@workstation:/home/cfeeley/.config/dotfield
#+end_src

***  Build ~MacBook-Pro~ configuration

#+begin_src shell
nom build git+ssh://cfeeley@workstation:/home/cfeeley/.config/dotfield#darwinConfigurations.MacBook-Pro.config.system.build.toplevel
#+end_src

** Build Rosy

#+begin_src shell
# Analogous to nix build $DOTFIELD_DIR#nixosConfigurations.rosy.config.system.build.toplevel
# on host 'rosy'.
# Target parameter: nixos://<host>/<nixosConfiguration>
deploy-flake --flake $DOTFIELD_DIR nixos://rosy/rosy
#+end_src

*** Run checks

#+begin_src shell
nix flake check git+ssh://cfeeley@workstation:/home/cfeeley/.config/dotfield
#+end_src

** Pretty build

#+begin_src shell
nom build ~/.config/dotfield#darwinConfigurations.MacBook-Pro.config.system.build.toplevel
#+end_src

** Infect hetzner

*** Create Floating IP

#+begin_src shell
hcloud primary-ip create --name minecraft --type ipv4 --datacenter ash-dc1
hcloud primary-ip enable-protection minecraft
#+end_src

*** COMMENT Create Volume

#+begin_src shell
hcloud volume create --name minecraft-data --size 10 --location ash
#+end_src

*** Create server
#+begin_src shell
hcloud server create \
    --image ubuntu-20.04 \
    --name h8tsner \
    --type cpx11 \
    --ssh-key GPG \
    --user-data-from-file $DOTFIELD_DIR/nixos/machines/h8tsner/user-data.txt \
    --datacenter ash-dc1 \
    --without-ipv4

    # --volume minecraft-data --automount
#+end_src

*** Assign Floating IP

#+begin_src shell
hcloud server shutdown h8tsner
hcloud primary-ip assign minecraft --server h8tsner
hcloud server poweron h8tsner
#+end_src

*** Deploy config
#+begin_src shell
deploy --skip-checks .#h8tsner -- --print-build-logs

hcloud server reboot h8tsner
#+end_src

** Build =debian-vm= system (inside VM)
#+begin_example
fnix build ~/.config/dotfield#homeConfigurationsPortable.aarch64-linux."cfeeley@debian-vm".activationPackage --show-trace

./result/bin/home-manager-generation
#+end_example

** =deploy-rs=: build =debian-vm= in QEMU
#+begin_example
deploy --skip-checks .#debian-vm -- --print-build-logs --show-trace
#+end_example

** Handy ~numtide/devshell~ functions

Credit: [[https://github.com/montchr/dotfield/blob/8a61b8fe37cc3d3186ac8728363d7977fea6ff6e/devShells/default.nix#L46][github:montchr/dotfield]]
#+begin_src nix
withCategory = category: attrset: attrset // { inherit category; };
pkgWithCategory = category: package: { inherit package category; };
#+end_src

* Emacs Remote

#+begin_src emacs-lisp
(load "server")
(unless (server-running-p) (server-start))
#+end_src

* ~rosy~ builder setup
As ~nixos~ user

** Partition disk
[[https://krisztianfekete.org/nixos-on-apple-silicon-with-utm/][source]]

#+begin_src shell :noeval
passwd nixos

sudo parted /dev/vda -- mklabel gpt
sudo parted /dev/vda -- mkpart primary 1GiB -8GiB
sudo parted /dev/vda -- mkpart primary linux-swap -8GiB 100%

sudo parted /dev/vda -- mkpart ESP fat32 1MiB 512MiB
sudo parted /dev/vda -- set 3 esp on

sudo mkfs.ext4 -L nixos /dev/vda1
sudo mkswap -L swap /dev/vda2
sudo mkfs.fat -F 32 -n boot /dev/vda3

sudo mount /dev/disk/by-label/nixos /mnt
sudo mkdir -p /mnt/boot
sudo mount /dev/disk/by-label/boot /mnt/boot
#+end_src

** Mount Share
*** For QEMU
#+begin_src shell :noeval
export SHARED_HOMEDIR=/run/share
export DOTFIELD_DIR=${SHARED_HOMEDIR}/.config/dotfield

sudo mkdir /run/share
sudo mount -t 9p -o trans=virtio share /run/share -oversion=9p2000.L
#+end_src

*** For Apple Virtualization Framework
[[https://docs.getutm.app/advanced/rosetta/#enabling-rosettaA][source]]
#+begin_src shell :noeval
export SHARED_HOMEDIR=/run/share/cfeeley
export DOTFIELD_DIR=${SHARED_HOMEDIR}/.config/dotfield

sudo mkdir /run/share
sudo mount -t virtiofs share /run/share/

sudo mkdir /run/rosetta
sudo mount -t virtiofs rosetta /run/rosetta/
#+end_src

** Install

As root (~sudo su~):
#+begin_src shell :noeval
sudo su

nix-shell -p git

mkdir -p ~/.ssh && cp ${SHARED_HOMEDIR}/.ssh/id_* ~/.ssh/

mkdir -p ~/.config && cp -a ${SHARED_HOMEDIR}/.config/nix/ ~/.config

# sudo nix --extra-experimental-features 'nix-command flakes' flake show $DOTFIELD_DIR

nixos-install --verbose --flake $DOTFIELD_DIR#rosy

umount /mnt/boot/
umount /mnt/

sync && reboot
#+end_src

** Rebuild ~rosy~

#+begin_src shell :noeval
export DOTFIELD_DIR=/run/share/cfeeley/.config/dotfield
sudo nixos-rebuild --print-build-logs switch --flake $DOTFIELD_DIR#rosy
#+end_src

** Build ~rosy~ iso

#+begin_src shell :noeval
nix shell nixpkgs#nixos-generators

export DOTFIELD_DIR=/run/share/cfeeley/.config/dotfield

nixos-generate --flake $DOTFIELD_DIR#rosy --show-trace --format iso
#+end_src

** Build ~workstation~ iso

#+begin_src shell :noeval
nix shell nixpkgs#nixos-generators

export DOTFIELD_DIR=/run/share/cfeeley/.config/dotfield

nix -L build $DOTFIELD_DIR#workstation-iso
#+end_src

* ~workstation~ recovery
:PROPERTIES:
:header-args:shell: :noweb-ref workstation-recovery :tangle no :noweb no :comments noweb
:END:

Honestly - this was such a waste of time. I tried 800 different things but in the end I ended up just nuking my nix store... which at least let me reinstall NixOS.

Biggest takeaway: ~initrd~ secrets are /the devil/. See:
[[https://github.com/NixOS/nixpkgs/issues/34262][NixOS/nixpkgs#34262 `boot.initrd.network.ssh.hostRSAKey` breaks activation if...]]

#+begin_src shell :tangle shell/scripts/workstation-recovery.sh :noweb yes :noweb-ref nil :comments none
#!/usr/bin/env bash

<<workstation-recovery>>
#+end_src

** Partition disk

#+begin_src shell
# format the disk with the luks structure
# open the encrypted partition and map it to /dev/mapper/cryptroot
cryptsetup luksOpen /dev/nvme0n1p5 cryptroot

# Mount partitions
mount /dev/mapper/LinuxGroup-root /mnt

# mount /dev/disk/by-label/EFIBOOT /mnt/boot
mount /dev/nvme0n1p1 /mnt/boot

mount /dev/mapper/LinuxGroup-home /mnt/home
#+end_src

** Enter NixOS chroot

#+begin_src shell
# Enter chroot
nixos-enter --root /mnt

# Login to cfeeley
su - cfeeley

# Unlock GPG
echo "Enter password for GPG key:"; stty -echo; gpg --passphrase-fd 0 --pinentry-mode loopback --decrypt ~/test-gpg.asc; stty echo

# Fetch and reset repo
cd ~/.config/dotfield
git remote add temp-mbp cfeeley@192.168.0.85:~/.config/dotfield
git config --global --add safe.directory /mnt/home/cfeeley/.config/dotfield
git fetch temp-mbp && git reset --hard temp-mbp/master

# Hack: use path://<repo> to workaround chroot problems
export DOTFIELD_DIR=path:///home/cfeeley/.config/dotfield

# Rebuild system configuration
sudo nixos-rebuild build --verbose --flake $DOTFIELD_DIR#workstation

# Activate system configuration and reinstall the bootloader
# sudo nixos-rebuild switch --verbose --install-bootloader --flake $DOTFIELD_DIR#workstation
#+end_src

Note the path to the final derivation - this will be used to activate the system in the next step.

** Install NixOS

*NOTE:* not inside ~nixos-enter~ chroot.

#+begin_src shell
# Get a DHCP address - only IPv6 worked until this for some reason
nix run nixpkgs#dhcpcd

echo "Enter password for GPG key:"; gpg --passphrase-fd 0 --pinentry-mode loopback --homedir /mnt/home/cfeeley/.gnupg --decrypt /mnt/home/cfeeley/test-gpg.asc

# Hack: use path://<repo> to workaround chroot problems
export DOTFIELD_DIR=path:///mnt/home/cfeeley/.config/dotfield

nixos-install --verbose --flake $DOTFIELD_DIR#workstation
#+end_src

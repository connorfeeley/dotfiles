* Table of Contents
1. [[*Useful Commands][Useful Commands]]
   1. [[#build-debian-vm][Build =debian-vm= system (inside VM)]]
   2. [[#deploy-rs-build][=deploy-rs=: build =debian-vm= in QEMU]]

* Useful Commands

** Unlock ~git-crypt~

#+begin_src shell :noeval
git-crypt unlock
#+end_src

** Debug Nix Evaluation Errors

*** On Linux

#+begin_src shell :noeval
nix --print-build-logs build ~/.config/dotfield#nixosConfigurations.workstation.config.system.build.toplevel --debugger --ignore-try
#+end_src

*** On Darwin

#+begin_src shell :noeval
nix --print-build-logs build ~/.config/dotfield#darwinConfigurations.MacBook-Pro.config.system.build.toplevel --debugger --ignore-try
#+end_src

** ~NIX_REMOTE~ variable

#+begin_src shell :noeval
NIX_REMOTE=ssh-ng://macbook-pro nix build $DOTFIELD_DIR#darwinConfigurations.MacBook-Pro.config.system.build.toplevel
#+end_src

** Check

#+begin_src shell :noeval
sudo nix -L flake check --option builders-use-substitutes true --builders 'ssh://cfeeley@macbook-pro'
#+end_src

#+begin_src shell :noeval
sudo nix -L flake check --option builders-use-substitutes true --builders 'ssh://cfeeley@workstation'
#+end_src

** Generate ~dot~ graph of nix store size (~nix-du~)

Generate ~dot~ file:
#+begin_src shell :noeval
nix-du -s=100MB | tred > /tmp/store.dot
zgrviewer /tmp/store.dot
#+end_src

Generate ~svg~:
#+begin_src shell :noeval
nix-du -s=100MB -O2 | tred | dot -Tsvg > /tmp/store.svg
#+end_src

** Change default shell

#+begin_src shell :noeval
sudo chsh -s /run/current-system/sw/bin/fish cfeeley
#+end_src

** Fetch flake over ssh

#+begin_src shell
darwin-rebuild switch --print-build-logs --flake git+ssh://cfeeley@workstation:/home/cfeeley/.config/dotfield
#+end_src

***  Build ~MacBook-Pro~ configuration

#+begin_src shell
nom build git+ssh://cfeeley@workstation:/home/cfeeley/.config/dotfield#darwinConfigurations.MacBook-Pro.config.system.build.toplevel
#+end_src

*** Run checks

#+begin_src shell
nix flake check git+ssh://cfeeley@workstation:/home/cfeeley/.config/dotfield
#+end_src

** Pretty build

#+begin_src shell
nom build ~/.config/dotfield#darwinConfigurations.MacBook-Pro.config.system.build.toplevel
#+end_src

** Infect hetzner

#+begin_src shell
hcloud server delete h8tsner

hcloud server create --image ubuntu-20.04 --name h8tsner --type cpx11 --ssh-key GPG --user-data-from-file $DOTFIELD_DIR/nixos/machines/h8tsner/user-data.txt --datacenter ash-dc1

deploy --skip-checks .#h8tsner -- --print-build-logs

hcloud server reboot h8tsner
#+end_src

** Build =debian-vm= system (inside VM)
#+begin_example
fnix build ~/.config/dotfield#homeConfigurationsPortable.aarch64-linux."cfeeley@debian-vm".activationPackage --show-trace

./result/bin/home-manager-generation
#+end_example

** =deploy-rs=: build =debian-vm= in QEMU
#+begin_example
deploy --skip-checks .#debian-vm -- --print-build-logs --show-trace
#+end_example

** Handy ~numtide/deveshell~ functions

Credit: [[https://github.com/montchr/dotfield/blob/8a61b8fe37cc3d3186ac8728363d7977fea6ff6e/devShells/default.nix#L46][github:montchr/dotfield]]
#+begin_src nix
withCategory = category: attrset: attrset // { inherit category; };
pkgWithCategory = category: package: { inherit package category; };
#+end_src

* Emacs Remote

#+begin_src emacs-lisp
(load "server")
(unless (server-running-p) (server-start))
#+end_src

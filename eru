#!/usr/bin/env bash
#
# eru
#
# my thanks go out to @d12frosted
# gratefully transcribed from https://github.com/d12frosted/environment/
#
# Usage:
#   eru [theme]...
#

querent="cdom"

set -euo pipefail

. ./lib/sh/main.sh

msg::info "Kernel name:      $KERNEL_NAME"
msg::info "Kernel release:   $KERNEL_RELEASE"
msg::info "Operating system: $OS_NAME"
msg::info "OS version:       $OS_VERSION"
msg::info "User:             $USER"
msg::info "XDG_CONFIG_HOME:  $XDG_CONFIG_HOME"
msg::info


# - - - - - - - - - - - - - - - - - - - -
# Helpers
# - - - - - - - - - - - - - - - - - - - -

msg::domain "Supporting" "Summoning helpers"

function theme_guard() {
  key=$(echo "$1" | tr '[:upper:]' '[:lower:]')
  local guard_ref="guard_$key"
  local ignore_guard_ref="guard_ignore_$key"
  guard="${!guard_ref}"
  ignore_guard="${!ignore_guard_ref}"
  if [[ ("$ALL" = "true" || "$guard" = "true") && "$ignore_guard" = "" ]]; then
    optional_theme "$1" "${@:2}"
    return 0
  else
    inactive_theme "$1" "${@:2}"
    return 1
  fi
}

function guard() {
  local condition=$1

  case $condition in
    install)  [[ "$ACTION" == "install" ]]  ;;
    upgrade)  [[ "$ACTION" == "upgrade" ]]  ;;
    test)     [[ "$ACTION" == "test" ]]     ;;
    arch)     [[ "$OS_NAME" == "arch" ]]    ;;
    macos)    [[ "$OS_NAME" == "macos" ]]   ;;
  esac

  return
}

function qualify_repo_url() {
  if [[ "$1" = "https://"* || "$1" = "git@"* ]]; then
    echo "$1"
  elif [[ "$2" = "github" ]]; then
    if [[ "$USE_HTTPS" = "true" ]]; then
      echo  "https://github.com/$1.git"
    else
      echo "git@github.com:$1.git"
    fi
  elif [[ "$2" = "gitlab" ]]; then
    if [[ "$USE_HTTPS" = "true" ]]; then
      echo  "https://gitlab.com/$1.git"
    else
      echo "git@gitlab.com:$1.git"
    fi
  fi
}

function git_lg() {
  git --no-pager \
      log \
      --graph \
      --pretty=format:'%Cred%h%Creset %C(bold blue)<%an> -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' \
      "$*"
}


# - - - - - - - - - - - - - - - - - - - -
# Variables
# - - - - - - - - - - - - - - - - - - - -

msg::domain "Supporting" "Defining variables"

ALL="true"
ACTION=
case $1 in
  install|upgrade|test)
    ACTION=$1
    shift
    ;;
  *)
    echo
    if [ -z "$1" ]; then
      ACTION=install
    else
      error "action '$1' is not supported"
      log "supported actions are: install, upgrade, test"
      exit 1
    fi
    ;;
esac

POSITIONAL=()
while [[ $# -gt 0 ]]
do
  if [[ "$1" != "" ]]; then
    if [[ "$1" = -* ]]; then
      key=$(echo "${1#-}" | tr '[:upper:]' '[:lower:]')
      declare -r "guard_ignore_$key=true"
    else
      key=$(echo "$1" | tr '[:upper:]' '[:lower:]')
      declare -r "guard_$key=true"
      ALL="false"
    fi
  fi
  shift
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [[ "$INTERACTIVE" = "" ]]; then
  INTERACTIVE=true
fi

# - - - - - - - - - - - - - - - - - - - -
# Lockfile
# - - - - - - - - - - - - - - - - - - - -

msg::domain "Supporting" "Summoning helpers"

LOCK_FILE=$XDG_CACHE_HOME/eru/eru.lock
if [[ -f "$LOCK_FILE" ]]; then
  msg::error "
Yet another world is being shaped by Eru

One must either wait patiently or embrace the horrors of the unknown and
manually delete the $LOCK_FILE"
  exit 1
fi
mkdir -p "$(dirname "$LOCK_FILE")"
touch "$LOCK_FILE"

function unlock() {
  rm -rf "$LOCK_FILE"
}

trap unlock INT TERM EXIT


# - - - - - - - - - - - - - - - - - - - -
# Bootstrap
# - - - - - - - - - - - - - - - - - - - -

msg::domain "Guardian" "Ensure directories exist" && {
  ensure_dir "$HOME/.local/bin"
  ensure_dir "$DEVELOPER"
}

# @TODO Make sure it works for Linux
theme_guard "SSH" "Checking SSH keys" && {

  if [[ "$INTERACTIVE" = "true" ]]; then
    ssh_key_add_url="https://github.com/settings/ssh/new"
    ssh_key_path="$HOME/.ssh/id_rsa"
    ssh_key_pub_path="${ssh_key_path}.pub"
    ssh_config_path="$HOME/.ssh/config"

    if [[ -f "$ssh_key_path" ]]; then
      msg::info "SSH key found at $ssh_key_path."
    else
      msg::info "No SSH key found."
      mkdir -p "$(dirname "$ssh_key_path")"
      ssh-keygen -t rsa -b 4096 -C "$USER" -f "$ssh_key_path"
      msg::info "SSH key was generated."
    fi

    msg::info "Starting ssh-agent"
    eval "$(ssh-agent -s)"

    guard macos && {
      msg::info "Automatically load SSH key and use Keychain"
      echo "Host *
 AddKeysToAgent yes
 UseKeychain yes
 IdentityFile $ssh_key_path" > "$ssh_config_path"
    }

    msg::info "Add SSH key to ssh-agent"
    ssh-add -K ~/.ssh/id_rsa

    msg::info "Make sure to add SSH key to GitHub"
    pbcopy < "$ssh_key_pub_path"
    open "$ssh_key_add_url"
    read -rp "Press enter to continue"
  fi

}

theme_guard "Repo" "Sync repos from Repofiles" && {
  map_lines sync_repo "$target/Repofile" || true
  map_lines sync_repo "$XDG_CONFIG_CACHE/eru/Repofile" || true
}

theme_guard "Link" "Link all files as defined in Linkfiles" && {
  linkfile "$target/Linkfile"
  linkfile "$XDG_CONFIG_CACHE/eru/Linkfile"
  linkfile "$XDG_CONFIG_CACHE/eru/Linkfile_${KERNEL_NAME}"
  for f in "$target"/**/Linkfile; do
    linkfile "$f"
  done
  for f in "$target"/**/Linkfile_"${KERNEL_NAME}"; do
    linkfile "$f"
  done
}

guard arch && {
  theme_guard "packages" "Bootstrap Arch Linux" && {
    msg::section "Install crucial dependenices"
    sudo pacman -S --noconfirm --needed \
      base-devel \
      git \
      pacman-contrib

    msg::section "Rank mirrors for pacman"
    mirrorlist="/etc/pacman.d/mirrorlist"
    mirrorlist_bak="${mirrorlist}.bak"
    if [[ -f "$mirrorlist_bak" ]]; then
      msg::info "Not updating mirrors list, because '$mirrorlist_bak' exists"
      msg::info "Delete in order to re-rank mirrors"
    else
      mirrorlist_tmp=$(mktemp)
      curl -s 'https://www.archlinux.org/mirrorlist/?country=all&protocol=https&ip_version=4' \
        | sed -e 's/^#Server/Server/' -e '/^#/d' > "$mirrorlist_tmp"
      sudo cp "$mirrorlist_tmp" "$mirrorlist_bak"
      # shellcheck disable=SC2024
      sudo sh -c "rankmirrors -n 6 '$mirrorlist_bak' > '$mirrorlist'"
    fi

    msg::section "Install aura for simpler AUR access"
    check aura || {
      sudo mkdir -p /var/cache/pacman/pkg
      aura_dir=$(mktemp -d)
      git clone https://aur.archlinux.org/aura-bin.git "$aura_dir"
      cd "$aura_dir" && {
        makepkg -si --noconfirm
      }
    }

    msg::section "Install yay for simpler AUR access"
    check yay || {
      yay_dir=$(mktemp -d)
      git clone https://aur.archlinux.org/yay.git "$yay_dir"
      cd "$yay_dir" && {
        makepkg -si --noconfirm
      }
    }
  }

  guard install && {
    theme_guard "packages" "Install all dependencies" && {
      msg::info "Import known GPG keys"
      # spotify
      curl -sS https://download.spotify.com/debian/pubkey.gpg | gpg --import

      function combine_files {
        local output
        output=$(mktemp)
        for f in "$@"; do
          if [[ -f $f ]]; then
            cat "$f" >> "$output"
          fi
        done
        echo "$output"
      }

      msg::info "Install packages"

      pacman_file=$(combine_files "$target/arch/Pacmanfile" "$target/arch/Pacmanfile_$USER")
      pacman_ignore=$(combine_files "$target/arch/Pacmanignore" "$target/arch/Pacmanignore_$USER")
      # shellcheck disable=SC2046
      sudo aura -S --noconfirm --needed $(comm -23 "$pacman_file" "$pacman_ignore")

      aur_file=$(combine_files "$target/arch/Aurfile" "$target/arch/Aurfile_$USER")
      aur_ignore=$(combine_files "$target/arch/Aurignore" "$target/arch/Aurignore_$USER")
      # shellcheck disable=SC2046
      sudo aura -A --noconfirm --needed $(comm -23 "$aur_file" "$aur_ignore")
    }
  }

  guard upgrade && {
    theme_guard "packages" "Upgrade Arch Linux" && {
      sudo aura -Syu --noconfirm
      sudo aura -Aux --noconfirm
    }
  }

  theme_guard "hardware" "Setup keyboard" && {
    if [[ ! -f /usr/share/X11/xkb/symbols/ua.bak ]]; then
      sudo mv /usr/share/X11/xkb/symbols/ua /usr/share/X11/xkb/symbols/ua.bak
    fi
    sudo cp "$XDG_CONFIG_HOME/xorg/xkb/symbols/ua" "/usr/share/X11/xkb/symbols/ua"

    # Make sure that Caps doesn't miss it's purpose.
    setxkbmap -option caps:ctrl_modifier
  }

  theme_guard "hardware" "Setup touchpad" && {
    sudo cp "$XDG_CONFIG_HOME/xorg/30-touchpad.conf" "/etc/X11/xorg.conf.d/30-touchpad.conf"
  }

  theme_guard "hardware" "Setup autolock" && {
    sudo cp "$XDG_CONFIG_HOME/arch/lock@.service" /etc/systemd/system/lock@.service
    systemctl enable "lock@${USER}.service" || error "systemd is not working"
  }

  theme_guard "hardware" "Setup backlight rules" && {
    tmp_rule=$(mktemp)
    for backlight in /sys/class/backlight/*; do
      name=$(basename "$backlight")
      echo "ACTION==\"add\", SUBSYSTEM==\"backlight\", KERNEL==\"$name\", RUN+=\"/bin/chgrp video /sys/class/backlight/%k/brightness\"" >> "$tmp_rule"
      echo "ACTION==\"add\", SUBSYSTEM==\"backlight\", KERNEL==\"$name\", RUN+=\"/bin/chmod g+w /sys/class/backlight/%k/brightness\"" >> "$tmp_rule"
    done
    sudo cp "$tmp_rule" /etc/udev/rules.d/backlight.rules
    if id -nG "$USER" | grep -qw "video"; then
      echo "You are already able to adjust brightness level"
    else
      echo "Adding you to 'video' user group"
      sudo gpasswd -a "$USER" video
    fi
  }

  theme_guard "gnupg" "Fix permissions" && {
    chown -R "$(whoami)" ~/.gnupg/
    find ~/.gnupg -type f -exec chmod 600 {} \;
    find ~/.gnupg -type d -exec chmod 700 {} \;
  }
}

guard macos && {
  theme_guard "packages" "Ensure brew exists" && {
    check brew || {
      log "Installing brew"
      /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
      brew update
    }
  }

  guard install && {
    theme_guard "packages" "Install all dependencies" && {
      cd "$target/macos" && brew bundle
    }
  }

  guard upgrade && {
    theme_guard "packages" "Upgrade packages" && {
      brew update
      brew upgrade
    }
  }
}

msg::domain "Git" "Create a local git config file" && {
  touch "$target/git/local.config"
}

guard macos && {
  theme_guard "OS" "Write all defaults" && {
    cd "$target/macos" && sudo ./defaults.sh
  }

  theme_guard "skhd" "Patch skhd application PATH" && {
    check skhd && {
      "$target/bin/patch_skhd_path"
    }
  }

  theme_guard "yabai" "Ensure scripting addition is installed" && {
    # reinstall the scripting addition
    sudo yabai --uninstall-sa
    sudo yabai --install-sa

    # load the scripting addition
    killall Dock || true

    sudo yabai --load-sa
  }
}

guard::arch && {
  theme_guard "xmonad" "Rebuild Xmonad configurations" && {
    msg::section "Install xmonad"
    (
      cd "$XDG_CONFIG_HOME/xmonad"
      stack --allow-different-user install || {
        notify send -a "Eru" -t "Failed to compile xmonad" -u critical
      }
    )

    msg::section "Restart xmonad"
    if pgrep d12-xmonad; then
      msg::info "Found running instance of xmonad. Restarting..."
      d12-xmonad --restart
    else
      msg::info "No running instance of xmonad is found. Meh..."
    fi
  }
}





#!/usr/bin/env bash
#
# eru
#
# my thanks go out to @d12frosted
# gratefully transcribed from https://github.com/d12frosted/environment/
#
# Usage:
#   eru [domain]...
#


QUERENT="cdom"

BASE_DIR="$( cd "${BASH_SOURCE[0]%/*}" && pwd )"

export -r IS_ERU=true

readonly GITHUB_REPOSITORY="montchr/dots"
readonly DOTFIELD_BRANCH="${CDOM_INIT_DOTFIELD_BRANCH:-main}"

# shellcheck source=./vendor/bash-oo-framework/lib/oo-bootstrap.sh
source "${BASE_DIR}/vendor/bash-oo-framework/lib/oo-bootstrap.sh"

import \
  util/exception \
  util/tryCatch \
  util/namedParameters


function get_import_base() {
  local IMPORT_BASE="."
  if [[ -n $IS_ERU ]]; then
    IMPORT_BASE="github:${GITHUB_REPOSITORY}/${DOTFIELD_BRANCH}"
  fi
  echo "${IMPORT_BASE}"
}
export get_import_base


import "$(get_import_base)/lib/main"


# - - - - - - - - - - - - - - - - - - - -
# System Info
# - - - - - - - - - - - - - - - - - - - -

msg::domain "System" "Surveying the landscape" && {
  world::info
}


# - - - - - - - - - - - - - - - - - - - -
# Variables
# - - - - - - - - - - - - - - - - - - - -




.should_skip_questions "$@" \
  && SKIP_QUESTIONS=1 \
  && print_warning "Skipping questions!"





# - - - - - - - - - - - - - - - - - - - -
# Bootstrap
# - - - - - - - - - - - - - - - - - - - -

function main() {

  guard::user "root" && {
    msg::warning "Running as root!"
  }

  # @TODO Make sure it works for Linux
  guard::domain "SSH" "Checking SSH keys" && {

    if [[ "$INTERACTIVE" = "true" ]]; then
      ssh_key_add_url="https://github.com/settings/ssh/new"
      ssh_key_path="$HOME/.ssh/id_rsa"
      ssh_key_pub_path="${ssh_key_path}.pub"
      ssh_config_path="$HOME/.ssh/config"

      if [[ -f "$ssh_key_path" ]]; then
        msg::info "SSH key found at $ssh_key_path."
      else
        msg::info "No SSH key found."
        mkdir -p "$(dirname "$ssh_key_path")"
        ssh-keygen -t rsa -b 4096 -C "$USER" -f "$ssh_key_path"
        msg::info "SSH key was generated."
      fi

      msg::info "Starting ssh-agent"
      eval "$(ssh-agent -s)"

      guard::macos && {

        msg::info "Automatically load SSH key and use Keychain"
        echo "Host *
AddKeysToAgent yes
UseKeychain yes
IdentityFile $ssh_key_path" > "$ssh_config_path"

      }

      msg::info "Add SSH key to ssh-agent"
      ssh-add -K ~/.ssh/id_rsa

      msg::info "Make sure to add SSH key to GitHub"
      pbcopy < "$ssh_key_pub_path"
      open "$ssh_key_add_url"
      read -rp "Press enter to continue"
    fi

  }
  


  
}

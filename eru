#!/usr/bin/env bash
#
# eru
#
# my thanks go out to @d12frosted
# gratefully transcribed from https://github.com/d12frosted/environment/
#
# Usage:
#   eru [domain]...
#


QUERENT="cdom"

BASE_DIR="$( cd "${BASH_SOURCE[0]%/*}" && pwd )"

export -r IS_ERU=true

readonly GITHUB_REPOSITORY="montchr/dots"
readonly DOTFILES_BRANCH="${CDOM_INIT_DOTFILES_BRANCH:-main}"

# shellcheck source=./vendor/bash-oo-framework/lib/oo-bootstrap.sh
source "${BASE_DIR}/vendor/bash-oo-framework/lib/oo-bootstrap.sh"

import \
  util/exception \
  util/tryCatch \
  util/namedParameters


function get_import_base() {
  local IMPORT_BASE="."
  if [[ -n $IS_ERU ]]; then
    IMPORT_BASE="github:${GITHUB_REPOSITORY}/${DOTFILES_BRANCH}"
  fi
  echo "${IMPORT_BASE}"
}
export get_import_base


import "$(get_import_base)/lib/main"


# - - - - - - - - - - - - - - - - - - - -
# System Info
# - - - - - - - - - - - - - - - - - - - -

msg::domain "System" "Surveying the landscape" && {
  world::info
}


# - - - - - - - - - - - - - - - - - - - -
# Variables
# - - - - - - - - - - - - - - - - - - - -

msg::domain "Supporting" "Defining variables"

ALL="true"
ACTION=
case $1 in
  install|upgrade|test)
    ACTION=$1
    shift
    ;;
  *)
    echo
    if [ -z "$1" ]; then
      ACTION=install
    else
      error "action '$1' is not supported"
      log "supported actions are: install, upgrade, test"
      exit 1
    fi
    ;;
esac

POSITIONAL=()
while [[ $# -gt 0 ]]
do
  if [[ "$1" != "" ]]; then
    if [[ "$1" = -* ]]; then
      key=$(echo "${1#-}" | tr '[:upper:]' '[:lower:]')
      declare -r "guard_ignore_$key=true"
    else
      key=$(echo "$1" | tr '[:upper:]' '[:lower:]')
      declare -r "guard_$key=true"
      ALL="false"
    fi
  fi
  shift
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if [[ "$INTERACTIVE" = "" ]]; then
  INTERACTIVE=true
fi


.should_skip_questions "$@" \
  && SKIP_QUESTIONS=1 \
  && print_warning "Skipping questions!"

# - - - - - - - - - - - - - - - - - - - -
# Lockfile
# - - - - - - - - - - - - - - - - - - - -

msg::domain "Supporting" "Handling lock file" && {

  LOCK_FILE=$XDG_CACHE_HOME/eru/eru.lock
  if [[ -f "$LOCK_FILE" ]]; then
    msg::error "
  Yet another world is being shaped by Eru

  One must either wait patiently or embrace the horrors of the unknown and
  manually delete the $LOCK_FILE"
    exit 1
  fi
  mkdir -p "$(dirname "$LOCK_FILE")"
  touch "$LOCK_FILE"

  function unlock() {
    rm -rf "$LOCK_FILE"
  }

  trap unlock INT TERM EXIT

}



# - - - - - - - - - - - - - - - - - - - -
# Bootstrap
# - - - - - - - - - - - - - - - - - - - -

function main() {

  guard::user "root" && {
    msg::warning "Running as root!"
  }

  msg::domain "Guardian" "Ensure directories exist" && {
    ensure_dir "$HOME/.local/bin"
    ensure_dir "$DEVELOPER"
  }

  # @TODO Make sure it works for Linux
  guard::domain "SSH" "Checking SSH keys" && {

    if [[ "$INTERACTIVE" = "true" ]]; then
      ssh_key_add_url="https://github.com/settings/ssh/new"
      ssh_key_path="$HOME/.ssh/id_rsa"
      ssh_key_pub_path="${ssh_key_path}.pub"
      ssh_config_path="$HOME/.ssh/config"

      if [[ -f "$ssh_key_path" ]]; then
        msg::info "SSH key found at $ssh_key_path."
      else
        msg::info "No SSH key found."
        mkdir -p "$(dirname "$ssh_key_path")"
        ssh-keygen -t rsa -b 4096 -C "$USER" -f "$ssh_key_path"
        msg::info "SSH key was generated."
      fi

      msg::info "Starting ssh-agent"
      eval "$(ssh-agent -s)"

      guard::macos && {

        msg::info "Automatically load SSH key and use Keychain"
        echo "Host *
AddKeysToAgent yes
UseKeychain yes
IdentityFile $ssh_key_path" > "$ssh_config_path"

      }

      msg::info "Add SSH key to ssh-agent"
      ssh-add -K ~/.ssh/id_rsa

      msg::info "Make sure to add SSH key to GitHub"
      pbcopy < "$ssh_key_pub_path"
      open "$ssh_key_add_url"
      read -rp "Press enter to continue"
    fi

  }


  guard::domain "Repo" "Sync repos from Repofiles" && {

    map_lines sync_repo "$target/Repofile" || true
    map_lines sync_repo "$XDG_CONFIG_CACHE/eru/Repofile" || true

  }


  guard::domain "Link" "Link all files as defined in Linkfiles" && {

    linkfile "$target/Linkfile"
    linkfile "$XDG_CONFIG_CACHE/eru/Linkfile"
    linkfile "$XDG_CONFIG_CACHE/eru/Linkfile_${KERNEL_NAME}"

    for f in "$target"/**/Linkfile; do
      linkfile "$f"
    done

    for f in "$target"/**/Linkfile_"${KERNEL_NAME}"; do
      linkfile "$f"
    done

  }


# - - - - - - - - - - - - - - - - - - - -
# OS-Specific
# - - - - - - - - - - - - - - - - - - - -

  guard::ubuntu \
    && os/ubuntu/install

  guard::arch \
    && os/arch/install

  guard::macos && {

    guard::domain "OS" "Install Essentials" && {
      os/macos/install
    }

    guard::domain "OS" "Write all defaults" && {
      os/macos/configure
    }

  }


  msg::domain "Git" "Create a local git config file" && {
    touch "$target/git/local.config"
  }


  guard::macos && {

    guard::domain "skhd" "Patch skhd application PATH" && {
      check skhd && {
        "$target/bin/patch_skhd_path"
      }
    }

    guard::domain "yabai" "Ensure scripting addition is installed" && {

      # reinstall the scripting addition
      sudo yabai --uninstall-sa
      sudo yabai --install-sa

      # load the scripting addition
      killall Dock || true

      sudo yabai --load-sa

    }

  }


  guard::arch && {

    guard::domain "xmonad" "Rebuild Xmonad configurations" && {

      msg::section "Install xmonad" && (
        cd "$XDG_CONFIG_HOME/xmonad"
        stack --allow-different-user install || {
          notify send -a "Eru" -t "Failed to compile xmonad" -u critical
        }
      )

      msg::section "Restart xmonad" && {
        if pgrep d12-xmonad; then
          msg::info "Found running instance of xmonad. Restarting..."
          d12-xmonad --restart
        else
          msg::info "No running instance of xmonad is found. Meh..."
        fi
      }

    }
  }

  msg::success "Everything is good here" \
    && return 0
}

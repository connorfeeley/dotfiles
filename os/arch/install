#!/usr/bin/env bash
#
# os/arch/install
#

# shellcheck source=../../vendor/bash-oo-framework/lib/oo-bootstrap.sh
source "${BASE_DIR}/vendor/bash-oo-framework/lib/oo-bootstrap.sh"


import \
  util/exception \
  util/tryCatch \
  util/namedParameters

import lib


guard.domain "packages" "Bootstrap Arch Linux" && {

  msg.section "Install crucial dependenices"
  sudo pacman -S --noconfirm --needed \
    base-devel \
    git \
    pacman-contrib

  msg.section "Rank mirrors for pacman"
  mirrorlist="/etc/pacman.d/mirrorlist"
  mirrorlist_bak="${mirrorlist}.bak"
  if [[ -f "$mirrorlist_bak" ]]; then
    msg.info "Not updating mirrors list, because '$mirrorlist_bak' exists"
    msg.info "Delete in order to re-rank mirrors"
  else
    mirrorlist_tmp=$(mktemp)
    curl -s 'https://www.archlinux.org/mirrorlist/?country=all&protocol=https&ip_version=4' \
      | sed -e 's/^#Server/Server/' -e '/^#/d' > "$mirrorlist_tmp"
    sudo cp "$mirrorlist_tmp" "$mirrorlist_bak"
    # shellcheck disable=2024
    sudo sh -c "rankmirrors -n 6 '$mirrorlist_bak' > '$mirrorlist'"
  fi

  msg.section "Install aura for simpler AUR access"
  check aura || {
    sudo mkdir -p /var/cache/pacman/pkg
    aura_dir=$(mktemp -d)
    git clone https://aur.archlinux.org/aura-bin.git "$aura_dir"
    cd "$aura_dir" && {
      makepkg -si --noconfirm
    }
  }

  msg.section "Install yay for simpler AUR access"
  check yay || {
    yay_dir=$(mktemp -d)
    git clone https://aur.archlinux.org/yay.git "$yay_dir"
    cd "$yay_dir" && {
      makepkg -si --noconfirm
    }
  }
}


guard.install && {

  guard.domain "packages" "Install all dependencies" && {

    msg.info "Import known GPG keys"
    # spotify
    curl -sS https://download.spotify.com/debian/pubkey.gpg | gpg --import

    function combine_files {
      local output
      output=$(mktemp)
      for f in "$@"; do
        if [[ -f $f ]]; then
          cat "$f" >> "$output"
        fi
      done
      echo "$output"
    }

    msg.info "Install packages"

    pacman_file=$(combine_files "$target/arch/Pacmanfile" "$target/arch/Pacmanfile_$USER")
    pacman_ignore=$(combine_files "$target/arch/Pacmanignore" "$target/arch/Pacmanignore_$USER")
    # shellcheck disable=2046
    sudo aura -S --noconfirm --needed $(comm -23 "$pacman_file" "$pacman_ignore")

    aur_file=$(combine_files "$target/arch/Aurfile" "$target/arch/Aurfile_$USER")
    aur_ignore=$(combine_files "$target/arch/Aurignore" "$target/arch/Aurignore_$USER")
    # shellcheck disable=2046
    sudo aura -A --noconfirm --needed $(comm -23 "$aur_file" "$aur_ignore")

  }

}


guard.upgrade && {
  guard.domain "packages" "Upgrade Arch Linux" && {
    sudo aura -Syu --noconfirm
    sudo aura -Aux --noconfirm
  }
}


guard.domain "hardware" "Setup keyboard" && {

  if [[ ! -f /usr/share/X11/xkb/symbols/ua.bak ]]; then
    sudo mv /usr/share/X11/xkb/symbols/ua /usr/share/X11/xkb/symbols/ua.bak
  fi
  sudo cp "$XDG_CONFIG_HOME/xorg/xkb/symbols/ua" "/usr/share/X11/xkb/symbols/ua"

  # Make sure that Caps doesn't miss it's purpose.
  setxkbmap -option caps:ctrl_modifier

}


guard.domain "hardware" "Setup touchpad" && {
  sudo cp "$XDG_CONFIG_HOME/xorg/30-touchpad.conf" "/etc/X11/xorg.conf.d/30-touchpad.conf"
}


guard.domain "hardware" "Setup autolock" && {
  sudo cp "$XDG_CONFIG_HOME/arch/lock@.service" /etc/systemd/system/lock@.service
  systemctl enable "lock@${USER}.service" || error "systemd is not working"
}


guard.domain "hardware" "Setup backlight rules" && {

  tmp_rule=$(mktemp)

  for backlight in /sys/class/backlight/*; do
    name=$(basename "$backlight")
    echo "ACTION==\"add\", SUBSYSTEM==\"backlight\", KERNEL==\"$name\", RUN+=\"/bin/chgrp video /sys/class/backlight/%k/brightness\"" >> "$tmp_rule"
    echo "ACTION==\"add\", SUBSYSTEM==\"backlight\", KERNEL==\"$name\", RUN+=\"/bin/chmod g+w /sys/class/backlight/%k/brightness\"" >> "$tmp_rule"
  done

  sudo cp "$tmp_rule" /etc/udev/rules.d/backlight.rules

  if id -nG "$USER" | grep -qw "video"; then
    echo "You are already able to adjust brightness level"
  else
    echo "Adding you to 'video' user group"
    sudo gpasswd -a "$USER" video
  fi

}


guard.domain "gnupg" "Fix permissions" && {
  chown -R "$(whoami)" ~/.gnupg/
  find ~/.gnupg -type f -exec chmod 600 {} \;
  find ~/.gnupg -type d -exec chmod 700 {} \;
}

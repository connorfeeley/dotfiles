# -*- mode: sh; eval: (sh-set-shell "bash") -*-
# shellcheck shell=bash
#
# os/macos
#

# shellcheck disable=1090
source "${BASE_DIR}/vendor/bash-oo-framework/lib/oo-bootstrap.sh"

import \
  util/exception \
  util/tryCatch \
  util/namedParameters

import lib/utils.sh


# Set computer name (as done via System Preferences â†’ Sharing)
function __set_hostname {
  local hostname="${1:-${HOSTNAME:-CDOM}}"
  sudo scutil --set ComputerName "${hostname}"
  sudo scutil --set HostName "${hostname}"
  sudo scutil --set LocalHostName "${hostname}"
  sudo defaults write \
    /Library/Preferences/SystemConfiguration/com.apple.smb.server \
    NetBIOSName \
    -string "${hostname}"
}


# - - - - - - - - - - - - - - - - - - - -
# Main
# - - - - - - - - - - - - - - - - - - - -

function main () {

  guard.domain "packages" "Ensure core CLI tools exist" && {
    xcode-select --install &> /dev/null
    shell.execute "
        until $(xcode-select --print-path &> /dev/null); do \
          sleep 5; \
        done
      " "Xcode Command Line Tools"
  }

  guard.domain "packages" "Ensure brew exists" && {
    shell.has brew || {
      msg.info "Installing brew"
      printf "\n" | \
        curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh &> /dev/null
      brew update
    }
  }


  guard.install && {

    guard.domain "packages" "Install all dependencies" && {
      cd "$XDG_CONFIG_HOME" \
        && brew bundle -c "${XDG_CONFIG_HOME}/Brewfile.darwin.bundle"
    }

    guard.domain "packages" "Allow Homebrew's Bash as login shell" && {
      local brew_bash_path
      brew_bash_path="$(brew --prefix)/bin/bash"

      # Ensure we're using a recent version of Bash before anything else.
      brew install bash

      # Add the path of the Bash version installed through Homebrew to the list
      # of allowed login shells in the `/etc/shells` file.
      if ! grep "${brew_bash_path}" < /etc/shells &> /dev/null; then
        printf '%s\n' "${brew_bash_path}" | sudo tee -a /etc/shells
      fi

      # Set Brew-installed version of Bash as the default (macOS comes with an
      # outdated version of Bash).
      chsh -s "${brew_bash_path}" &> /dev/null
      print_result $? "Bash (use latest version)"

    }

    guard.domain "hostname" "Set system hostname" && {
      __set_hostname "${HOSTNAME}"
    }

  }


  guard.upgrade && {
    guard.domain "packages" "Upgrade packages" && {
      brew update
      brew upgrade
    }
  }

}

main "$@"

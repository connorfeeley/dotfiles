#!/usr/bin/env bash
#
# os/ubuntu/install
#

set -e

# shellcheck source=../../lib/utils.sh
. "${DOTFILES_DIR}/lib/utils.sh"
# shellcheck source=./lib/user.sh
. "${DOTFILES_DIR}/os/ubuntu/lib/user.sh"

# - - - - - - - - - - - - - - - - - - - -
# Helper Functions
# - - - - - - - - - - - - - - - - - - - -

function get_current_dir() {
    local current_dir="${BASH_SOURCE%/*}"
    if [[ ! -d "${current_dir}" ]]; then current_dir="$PWD"; fi
    echo "${current_dir}"
}

# Resynchronize the package index files from their sources.
function apt_update () {
  execute \
    "sudo apt-get update -qqy" \
    "APT (update)"
}

# Install the newest versions of all packages installed.
function apt_upgrade() {
  execute \
    "export DEBIAN_FRONTEND=\"noninteractive\" \
      && sudo apt-get -o Dpkg::Options::=\"--force-confnew\" upgrade -qqy" \
    "APT (upgrade)"
}

function install_pkg () {
  EXTRA_ARGUMENTS="$3"
  PACKAGE="$2"
  PACKAGE_READABLE_NAME="$1"

  if ! is_pkg_installed "$PACKAGE"; then
    execute "sudo apt-get install --allow-unauthenticated -qqy $EXTRA_ARGUMENTS $PACKAGE" "$PACKAGE_READABLE_NAME"
  else
    print_success "$PACKAGE_READABLE_NAME"
  fi
}

function is_pkg_installed () {
  dpkg -s "$1" &> /dev/null
}



# - - - - - - - - - - - - - - - - - - - -
# UFW
# - - - - - - - - - - - - - - - - - - - -

function .setup_ufw () {
  sudo ufw allow OpenSSH
  yes y | sudo ufw enable
}


# - - - - - - - - - - - - - - - - - - - -
# Swapfile
# - - - - - - - - - - - - - - - - - - - -

# Get the amount of installed physical memory in GB (rounded up).
function .swap.get_mem () {
  local phymem
  phymem="$(free -g|awk '/^Mem:/{print $2}')"

  [[ ${phymem} == '0' ]] && \
    exit 1

  echo "${phymem}"
}

# Create swapfile.
#
# Uses
#   .swap.get_mem
#
function .swap.create () {
  local swapmem=$(($(.swap.get_mem) * 2))

  # Anything over 4GB in swap is probably unnecessary as a RAM fallback
  if [ ${swapmem} -gt 4 ]; then
      swapmem=4
  fi

  sudo fallocate -l "${swapmem}G" /swapfile
  sudo chmod 600 /swapfile
  sudo mkswap /swapfile
  sudo swapon /swapfile
}

# Mount the swapfile.
function .swap.mount () {
  sudo cp /etc/fstab /etc/fstab.bak
  echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
}

function .swap.adjust () {
  local action=${1}
  local swappiness=${2}
  local vfs_cache_pressure=${3}

  case $action in
    run)
      sudo sysctl vm.swappiness="${swappiness}"
      sudo sysctl vm.vfs_cache_pressure="${vfs_cache_pressure}"
      ;;
    save)
      echo "vm.swappiness=${swappiness}" | sudo tee -a /etc/sysctl.d/50-swapfile.conf
      echo "vm.vfs_cache_pressure=${vfs_cache_pressure}" | sudo tee -a /etc/sysctl.d/50-swapfile.conf
      ;;
    *)
      print_error "Unknown action!"
      exit 1
      ;;
  esac
}


# - - - - - - - - - - - - - - - - - - - -
# Time
# - - - - - - - - - - - - - - - - - - - -

# Setup timezone.
function .setup_timezone () {
  local timezone

  ask "Enter the timezone for the server (Default is 'America/New_York')"
  timezone=$(get_answer)
  timezone=${timezone:-America/New_York}

  # Set the timezone.
  echo "${timezone}" | sudo tee /etc/timezone
  sudo ln -fs \
    "/usr/share/zoneinfo/${timezone}" \
    /etc/localtime # https://bugs.launchpad.net/ubuntu/+source/tzdata/+bug/1554806
  sudo dpkg-reconfigure -f noninteractive tzdata

  print_in_yellow "Timezone is set to $(cat /etc/timezone)" >&3
}

function .setup_ntp () {
  ubuntu_version="$(lsb_release -sr)"

  if [[ $ubuntu_version == '20.04' ]]; then
    sudo systemctl restart systemd-timesyncd
  else
    sudo apt-get update
    sudo apt-get --assume-yes install ntp
  fi
}


# - - - - - - - - - - - - - - - - - - - -
# Cleanup
# - - - - - - - - - - - - - - - - - - - -

function .cleanup () {
  sudo service ssh restart

  [[ -f "/etc/sudoers.bak" ]] && {
    print_in_purple "Restoring original /etc/sudoers file..."
    sudo mv /etc/sudoers.bak /etc/sudoers
  }
}


# - - - - - - - - - - - - - - - - - - - -
# Main
# - - - - - - - - - - - - - - - - - - - -

function main () {
  apt_update
  apt_upgrade

  install_pkg "Build Essential" "build-essential"
  install_pkg "GnuPG archive keys" "debian-archive-keyring"
  install_pkg "Git" "git"
  install_pkg "curl" "curl"

  print_in_purple "Creating a new user with sudo capabilities..."
  user::main

  print_in_purple "Setting up UFW..."
  .setup_ufw

  # Create and configure swapfile if it doesn't yet exist.
  [[ "$(sudo swapon -s)" != *"/swapfile"* ]] && {
    print_in_purple "Swapfile doesn't exist! Creating and configuring swapfile..."
    .swap.create
    .swap.mount
    .swap.adjust run '10' '50'
    .swap.adjust save '10' '50'
  }

  print_in_purple "Configuring timezone..."
  .setup_timezone

  print_in_purple "Installing/configuring Network Time Protocol..."
  .setup_ntp

  print_in_purple "Cleaning up..."
  .cleanup

  print_success "Setup complete!"
}

main "$@"

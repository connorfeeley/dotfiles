#!/usr/bin/env bash
#
# os/ubuntu/install
#

set -e

# shellcheck source=../../lib/utils.sh
. "${DOTFILES_DIR}/lib/utils.sh"
# shellcheck source=./lib/pkg.sh
. "${DOTFILES_DIR}/os/ubuntu/lib/pkg.sh"


# - - - - - - - - - - - - - - - - - - - -
# Main
# - - - - - - - - - - - - - - - - - - - -

function main () {
  local previous_directory
  previous_directory=$(pwd)

  # Ensure that the following actions are made relative to this file's path.
  cd "$(dirname "${BASH_SOURCE[0]}")" ||
    exit 1
    
  guard::domain "packages" "Updating apt repositories" && {
    pkg::update_repos
  }
  
  guard::install && {
  
    guard::domain "packages" "Upgrading existing dependencies" && {
      pkg::upgrade_all
    }
    
    guard::domain "packages" "Installing crucial dependencies" && {
      pkg::install "Build Essential" "build-essential"
      pkg::install "GnuPG archive keys" "debian-archive-keyring"
      pkg::install "Git" "git"
      pkg::install "curl" "curl"
    }
    
    guard::domain "server" "Configure UFW" && {    
      sudo ufw allow OpenSSH
      yes y | sudo ufw enable
    }
    
    if [[ "root" == $(whoami) ]]; then
      msg::warning "Running as root! Creating a new user with sudo capabilities..."
      . ./user.sh
    }
    
    print_subhed "Configuring timezone..."
    time::setup_timezone "${CDOM_INIT_TIMEZONE}"

    print_subhed "Installing/configuring Network Time Protocol..."
    time::setup_ntp
   
  }
  
  
  guard::upgrade && {
    pkg::upgrade_all
  }
  
  
  guard::install && {
    
    print_subhed "Cleaning up..."
    sudo service ssh restart

    [[ -f "/etc/sudoers.bak" ]] && {
      print_info "Restoring original /etc/sudoers file..."
      sudo mv /etc/sudoers.bak /etc/sudoers
    }
    
  }
  
  cd "$previous_directory"

}

main "$@"

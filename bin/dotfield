#!/usr/bin/env bash
#
# dotfield
#
# Nix flake shortcuts.
#
# Usage:
#   dotfield <subcommand> [<args>...]
#   dotfield build [<flake-output>]
#   dotfield switch [<flake-output>]
#   dotfield evolve [<flake-output>]
#   dotfield repl [<flake-output>]

set -e

DOTFIELD_DIR="$(git rev-parse --show-toplevel)"

# shellcheck source=../lib/utils.sh
. "${DOTFIELD_DIR}/lib/utils.sh"

#========================================
# Get a path to a flake output
#
# TODO: ensure absolute path
#
# Arguments:
#   Flake directory.
#   Flake output name.
#========================================
function __flake_path() {
  printf "%s/#%s" "$1" "$2"
}

#========================================
# Switch to a new generation.
#
# Arguments:
#   Flake directory.
#   Flake output name.
#========================================
function __switch() {
  local dir="$1"
  local output="$2"
  local rebuild="${dir}/result/sw/bin/darwin-rebuild"
  [[ -e "${rebuild}" ]] && {
    "${rebuild}" switch -v --flake "$(__flake_path "${dir}" "${output}")" || {
      msg::error "Failed to switch to the new generation!"
    }
  }
}

#========================================
# Open a new Nix REPL shell for a flake output.
#
# FIXME: assumes darwin
#
# Arguments:
#   Flake output name.
#========================================
function __repl() {
  local output="$1"
  local conf
  conf="$(mktemp)"

  msg::subdomain "Loading flake from ${output}..."

  output="darwinConfigurations.${output}"

  cat > "${conf}" << EOF
(builtins.getFlake (toString ${DOTFIELD_DIR})).${output}
EOF

  nix repl "${conf}"
}

#========================================
# Entry point.
#========================================
function main() {

  local SUBCOMMAND="$1"
  local output
  local dir
  local flake_path

  output="${2:-${DOTFIELD_HOSTNAME:-${HOSTNAME:-$(hostname)}}}"
  dir="${3:-${DOTFIELD_DIR}}"
  flake_path="$(__flake_path "${dir}" "${output}")"

  case $SUBCOMMAND in
    build)
      msg::domain "Evolution" "Building '${output}'"
      nix build -v "${flake_path}"
      ;;

    switch)
      msg::domain "Evolution" "Switching to new generation"
      __switch "${dir}" "${output}"
      ;;

    evolve)
      msg::domain "Evolution" "Building '${output}'"
      nix build -v "${flake_path}"

      msg::domain "Evolution" "Switching to new generation"
      __switch "${dir}" "${output}"
      ;;

    repl)
      msg::domain "Introspection" "Launching REPL shell for ${output}"
      __repl "${output}"
      ;;

    *)
      msg::error "[Error] Invalid subcommand ${SUBCOMMAND}! Aborting."
      return 1
      ;;
  esac
}

main "$@"

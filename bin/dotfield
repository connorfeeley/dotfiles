#!/usr/bin/env bash
#
# dotfield
#
# Nix flake shortcuts.
#
# Usage:
#   dotfield <subcommand> [<args>...]
#   dotfield build [<flake-output>]
#   dotfield switch [<flake-output>]
#   dotfield evolve [<flake-output>]
#   dotfield repl [<flake-output>]

set -e

DOTFIELD_DIR="$(git rev-parse --show-toplevel)"

# shellcheck source=../lib/utils.sh
. "${DOTFIELD_DIR}/lib/utils.sh"

#========================================
# Get an absolute path to a system flake output.
#
# Usage:
#   flake::output <name>
# Arguments:
#   Flake output name.
# Globals:
#   DOTFIELD_DIR
#========================================
function flake::output() {
  local output_name=$1
  printf "%s/#%s" "${DOTFIELD_DIR}" "${output_name}"
}

#========================================
# Build a specified flake output.
#
# Usage:
#   host::build <name> [<args>...]
# Arguments:
#   Flake output name.
#   Args to pass to the build command.
#========================================
function host::build() {
  local output="$1"
  shift
  nix build --verbose "$(flake::output "${output}")" "$@"
}

#========================================
# Switch to a new generation.
#
# Usage:
#   host::switch <name> [<args>...]
# Arguments:
#   Flake output name.
#   Args to pass to the switch command.
# Globals:
#   DOTFIELD_DIR
#========================================
function host::switch() {
  local output="$1"

  shift

  "${DOTFIELD_DIR}/result/sw/bin/darwin-rebuild" switch --verbose --flake \
    "$(flake::output "${output}")" \
    "$@" ||
    {
      msg::error "Failed to switch to the new generation!"
    }
  }
}

#========================================
# Open a new Nix REPL shell for a flake output.
#
# FIXME: assumes darwin
#
# Usage:
#   host::repl <output-name>
# Arguments:
#   Flake output name.
# Globals:
#   DOTFIELD_DIR
#========================================
function host::repl() {
  local output="$1"
  local conf
  conf="$(mktemp)"

  msg::subdomain "Loading flake from ${output}..."

  output="darwinConfigurations.${output}"

  cat >"${conf}" <<EOF
(builtins.getFlake (toString ${DOTFIELD_DIR})).${output}
EOF

  nix repl "${conf}"
}

#========================================
# Entry point.
#========================================
function main() {
  local subcommand="$1"
  local output

  shift

  output="${DOTFIELD_HOSTNAME:-${HOSTNAME:-$(hostname)}}"

  case "${subcommand}" in
    build)
      msg::domain "Evolution" "Building '${output}'"
      host::build "${output}" "$@"
      ;;

    switch)
      msg::domain "Evolution" "Switching to new generation"
      host::switch "${output}" "$@"
      ;;

    evolve)
      msg::domain "Evolution" "Building '${output}'"
      host::build "${output}"

      msg::domain "Evolution" "Switching to new generation"
      host::switch "${output}"
      ;;

    repl)
      msg::domain "Introspection" "Launching REPL shell for ${output}"
      host::repl "${output}"
      ;;
      ;;

    *)
      msg::error "[Error] Invalid subcommand ${subcommand}! Aborting."
      return 1
      ;;
  esac
}

main "$@"

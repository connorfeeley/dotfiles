#!/usr/bin/env bash
#
# dotfield
#
# Usage:
#   dotfield <subcommand> [<args>...]
#   dotfield build [<flake-name>]
#   dotfield repl [<hostname>]

set -e

DOTFIELD_DIR="$(git rev-parse --show-toplevel)"

# shellcheck disable=SC1091
. "${DOTFIELD_DIR}/utils.sh"

#========================================
# Build the flake.
#
# Global:
#   DOTFIELD_DIR
# Arguments:
#   Flake output name.
#========================================
function __nix::build() {
  local output="$1"

  nix build -v "${DOTFIELD_DIR}/\#${output}"

  "${DOTFIELD_DIR}/result/sw/bin/darwin-rebuild" \
    switch -v --flake "${DOTFIELD_DIR}/\#${output}"
}

#========================================
# Open a new nix repl shell for this machine's host.
#
# Global:
#   DOTFIELD_DIR
# Arguments:
#   Flake output name.
#========================================
function __nix::repl() {
  local output="$1"
  local conf
  conf="$(mktemp)"

  msg::subdomain "Loading flake from ${DOTFIELD_DIR}.${output}..."

  cat > "${conf}" << EOF
(builtins.getFlake (toString ${DOTFIELD_DIR})).${output}
EOF

  nix repl "${conf}"
}

#========================================
# Entry point.
#========================================
function main() {
  local SUBCOMMAND="$1"
  shift

  local flake_output
  flake_output=${1:-${HOSTNAME:-${HOST:-$(hostname)}}}
  flake_output="$(str::lower "${flake_output}")"

  case $SUBCOMMAND in
    build)
      msg::domain "Nix" "Building flake ${flake_output}"
      __nix::build "${flake_output}"
      ;;

    repl)
      msg::domain "Nix" "Launching REPL shell for ${flake_output}"
      # TODO: Add support for NixOS
      __nix::repl "darwinConfigurations.${flake_output}"
      ;;

    *)
      msg::error "[Error] Invalid subcommand ${SUBCOMMAND}! Aborting."
      return 1
      ;;
  esac
}

main "$@"
